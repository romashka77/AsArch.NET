//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AsArch.NET.EntityDataModel
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class DB_pfr_sap : DbContext
    {
        public DB_pfr_sap()
            : base("name=DB_pfr_sap")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<ACCOUNT> ACCOUNTS { get; set; }
        public virtual DbSet<ATTR_FUNCTIONS> ATTR_FUNCTIONS { get; set; }
        public virtual DbSet<ATTR> ATTRS { get; set; }
        public virtual DbSet<ATTRTYPE> ATTRTYPES { get; set; }
        public virtual DbSet<ATTRVAL_CHAR> ATTRVAL_CHAR { get; set; }
        public virtual DbSet<ATTRVAL_DATE> ATTRVAL_DATE { get; set; }
        public virtual DbSet<ATTRVAL_FLOAT> ATTRVAL_FLOAT { get; set; }
        public virtual DbSet<ATTRVAL_IMAGE> ATTRVAL_IMAGE { get; set; }
        public virtual DbSet<ATTRVAL_INT> ATTRVAL_INT { get; set; }
        public virtual DbSet<ATTRVAL_LV> ATTRVAL_LV { get; set; }
        public virtual DbSet<ATTRVAL_TEXT> ATTRVAL_TEXT { get; set; }
        public virtual DbSet<AUTOREF> AUTOREFs { get; set; }
        public virtual DbSet<CATALOG_RULES> CATALOG_RULES { get; set; }
        public virtual DbSet<CATALOG_TYPES> CATALOG_TYPES { get; set; }
        public virtual DbSet<CHILD_ATTRS> CHILD_ATTRS { get; set; }
        public virtual DbSet<CHILD_USER_ATTRS> CHILD_USER_ATTRS { get; set; }
        public virtual DbSet<CONFSEQ> CONFSEQs { get; set; }
        public virtual DbSet<CONTROLS_CONDITION> CONTROLS_CONDITION { get; set; }
        public virtual DbSet<CONTROLS_GROUP> CONTROLS_GROUP { get; set; }
        public virtual DbSet<CONTROLS_XML> CONTROLS_XML { get; set; }
        public virtual DbSet<DATA_IMAGES> DATA_IMAGES { get; set; }
        public virtual DbSet<DEFAULT_TREE> DEFAULT_TREE { get; set; }
        public virtual DbSet<DEFAULT_VALUES> DEFAULT_VALUES { get; set; }
        public virtual DbSet<DICTIONARy> DICTIONARIES { get; set; }
        public virtual DbSet<EVENT_TYPES> EVENT_TYPES { get; set; }
        public virtual DbSet<EVENTRULE_ACTIONS> EVENTRULE_ACTIONS { get; set; }
        public virtual DbSet<EVENTRULE_CONDS> EVENTRULE_CONDS { get; set; }
        public virtual DbSet<EVENTRULE_OBJECTS> EVENTRULE_OBJECTS { get; set; }
        public virtual DbSet<EVENT> EVENTS { get; set; }
        public virtual DbSet<EXTERNAL_CHILD_ATTRS> EXTERNAL_CHILD_ATTRS { get; set; }
        public virtual DbSet<EXTERNAL_CONFIG> EXTERNAL_CONFIG { get; set; }
        public virtual DbSet<EXTERNAL_DB> EXTERNAL_DB { get; set; }
        public virtual DbSet<EXTERNAL_LINKS> EXTERNAL_LINKS { get; set; }
        public virtual DbSet<FACECONFIG> FACECONFIGs { get; set; }
        public virtual DbSet<FACECONFIG_TYPES> FACECONFIG_TYPES { get; set; }
        public virtual DbSet<FACENAV> FACENAVs { get; set; }
        public virtual DbSet<FAVOURITES_TREE> FAVOURITES_TREE { get; set; }
        public virtual DbSet<FILESCONFIG> FILESCONFIGs { get; set; }
        public virtual DbSet<FILESCONFIG_NODE> FILESCONFIG_NODE { get; set; }
        public virtual DbSet<FUNCTIONS_PARAM> FUNCTIONS_PARAM { get; set; }
        public virtual DbSet<GROUP> GROUPS { get; set; }
        public virtual DbSet<HISTORY_EVENTS> HISTORY_EVENTS { get; set; }
        public virtual DbSet<HISTORY_TYPES> HISTORY_TYPES { get; set; }
        public virtual DbSet<IMPORT_LOG> IMPORT_LOG { get; set; }
        public virtual DbSet<IMPORTNODE> IMPORTNODES { get; set; }
        public virtual DbSet<IMPORTSETTING> IMPORTSETTINGS { get; set; }
        public virtual DbSet<ITEMTYPE_REF> ITEMTYPE_REF { get; set; }
        public virtual DbSet<ITEMTYPE> ITEMTYPES { get; set; }
        public virtual DbSet<ITEMTYPES_TREE> ITEMTYPES_TREE { get; set; }
        public virtual DbSet<NAV_BUTTONS> NAV_BUTTONS { get; set; }
        public virtual DbSet<NODE> NODEs { get; set; }
        public virtual DbSet<NODE_GROUP> NODE_GROUP { get; set; }
        public virtual DbSet<OPTION> OPTIONS { get; set; }
        public virtual DbSet<QUERy> QUERIES { get; set; }
        public virtual DbSet<QUERY_USER> QUERY_USER { get; set; }
        public virtual DbSet<REFATTR> REFATTRS { get; set; }
        public virtual DbSet<REFATTRS_USER> REFATTRS_USER { get; set; }
        public virtual DbSet<REFTREE> REFTREEs { get; set; }
        public virtual DbSet<REFTREE_LINKS> REFTREE_LINKS { get; set; }
        public virtual DbSet<REFTREE_TABLE> REFTREE_TABLE { get; set; }
        public virtual DbSet<REFTREE_TABLECONFIG> REFTREE_TABLECONFIG { get; set; }
        public virtual DbSet<REFTREE_TYPES> REFTREE_TYPES { get; set; }
        public virtual DbSet<repl_node> repl_node { get; set; }
        public virtual DbSet<REPORT> REPORTS { get; set; }
        public virtual DbSet<REPORTS_WORD> REPORTS_WORD { get; set; }
        public virtual DbSet<ROLE_CONTROLS_CONDITION> ROLE_CONTROLS_CONDITION { get; set; }
        public virtual DbSet<ROLE_CONTROLS_GROUP> ROLE_CONTROLS_GROUP { get; set; }
        public virtual DbSet<ROLE_CONTROLS_XML> ROLE_CONTROLS_XML { get; set; }
        public virtual DbSet<ROLE_DATA_IMAGES> ROLE_DATA_IMAGES { get; set; }
        public virtual DbSet<ROLE_FORMS> ROLE_FORMS { get; set; }
        public virtual DbSet<ROLE> ROLES { get; set; }
        public virtual DbSet<SEARCH_TABLES> SEARCH_TABLES { get; set; }
        public virtual DbSet<SEARCHTABLE_CONDS> SEARCHTABLE_CONDS { get; set; }
        public virtual DbSet<SEARCHTABLE_TYPES> SEARCHTABLE_TYPES { get; set; }
        public virtual DbSet<SECURITY_LOG> SECURITY_LOG { get; set; }
        public virtual DbSet<SEQ> SEQs { get; set; }
        public virtual DbSet<SIGNAL_TABLE> SIGNAL_TABLE { get; set; }
        public virtual DbSet<SIGNAL_TABLE2> SIGNAL_TABLE2 { get; set; }
        public virtual DbSet<STATUSBAR> STATUSBARs { get; set; }
        public virtual DbSet<STORAGE> STORAGEs { get; set; }
        public virtual DbSet<SYSTEM_REPLICATIONCHECK> SYSTEM_REPLICATIONCHECK { get; set; }
        public virtual DbSet<SYSTEM_REPLICCONFIG> SYSTEM_REPLICCONFIG { get; set; }
        public virtual DbSet<SYSTEM_REPLICQUEUE> SYSTEM_REPLICQUEUE { get; set; }
        public virtual DbSet<SYSTEM_REPLICREGIONS> SYSTEM_REPLICREGIONS { get; set; }
        public virtual DbSet<TABLE_SORTING> TABLE_SORTING { get; set; }
        public virtual DbSet<TABLECONFIG> TABLECONFIGs { get; set; }
        public virtual DbSet<TABLELISTCONFIG> TABLELISTCONFIGs { get; set; }
        public virtual DbSet<TABLEVAL_CHAR> TABLEVAL_CHAR { get; set; }
        public virtual DbSet<TABLEVAL_DATE> TABLEVAL_DATE { get; set; }
        public virtual DbSet<TABLEVAL_FLOAT> TABLEVAL_FLOAT { get; set; }
        public virtual DbSet<TABLEVAL_INT> TABLEVAL_INT { get; set; }
        public virtual DbSet<TREE_ATTRS> TREE_ATTRS { get; set; }
        public virtual DbSet<TREE_CONFIG> TREE_CONFIG { get; set; }
        public virtual DbSet<TYPE_ATTR> TYPE_ATTR { get; set; }
        public virtual DbSet<USER_CONFIG> USER_CONFIG { get; set; }
        public virtual DbSet<USER_FILES> USER_FILES { get; set; }
        public virtual DbSet<USER> USERS { get; set; }
        public virtual DbSet<VIRTUAL_ATTRS> VIRTUAL_ATTRS { get; set; }
        public virtual DbSet<VIRTUAL_CONDS> VIRTUAL_CONDS { get; set; }
        public virtual DbSet<ASCONF> ASCONFs { get; set; }
    
        public virtual int AddTypeToRole(Nullable<int> id_role, Nullable<int> id_type, Nullable<int> transFlag)
        {
            var id_roleParameter = id_role.HasValue ?
                new ObjectParameter("id_role", id_role) :
                new ObjectParameter("id_role", typeof(int));
    
            var id_typeParameter = id_type.HasValue ?
                new ObjectParameter("id_type", id_type) :
                new ObjectParameter("id_type", typeof(int));
    
            var transFlagParameter = transFlag.HasValue ?
                new ObjectParameter("TransFlag", transFlag) :
                new ObjectParameter("TransFlag", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddTypeToRole", id_roleParameter, id_typeParameter, transFlagParameter);
        }
    
        public virtual int BlockSweep(Nullable<int> transFlag)
        {
            var transFlagParameter = transFlag.HasValue ?
                new ObjectParameter("TransFlag", transFlag) :
                new ObjectParameter("TransFlag", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("BlockSweep", transFlagParameter);
        }
    
        public virtual int CanDefault(Nullable<int> id_node, Nullable<int> id_attr)
        {
            var id_nodeParameter = id_node.HasValue ?
                new ObjectParameter("id_node", id_node) :
                new ObjectParameter("id_node", typeof(int));
    
            var id_attrParameter = id_attr.HasValue ?
                new ObjectParameter("id_attr", id_attr) :
                new ObjectParameter("id_attr", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CanDefault", id_nodeParameter, id_attrParameter);
        }
    
        public virtual int CanDeleteNode(Nullable<int> id_node, Nullable<bool> childOnly)
        {
            var id_nodeParameter = id_node.HasValue ?
                new ObjectParameter("id_node", id_node) :
                new ObjectParameter("id_node", typeof(int));
    
            var childOnlyParameter = childOnly.HasValue ?
                new ObjectParameter("ChildOnly", childOnly) :
                new ObjectParameter("ChildOnly", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CanDeleteNode", id_nodeParameter, childOnlyParameter);
        }
    
        public virtual int ChangeNodeType(Nullable<int> id_node, Nullable<int> id_newtype, Nullable<int> transFlag)
        {
            var id_nodeParameter = id_node.HasValue ?
                new ObjectParameter("id_node", id_node) :
                new ObjectParameter("id_node", typeof(int));
    
            var id_newtypeParameter = id_newtype.HasValue ?
                new ObjectParameter("id_newtype", id_newtype) :
                new ObjectParameter("id_newtype", typeof(int));
    
            var transFlagParameter = transFlag.HasValue ?
                new ObjectParameter("TransFlag", transFlag) :
                new ObjectParameter("TransFlag", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ChangeNodeType", id_nodeParameter, id_newtypeParameter, transFlagParameter);
        }
    
        public virtual int ChangeOrderDefaultNode(Nullable<int> id_node, Nullable<int> n_order, Nullable<int> transFlag)
        {
            var id_nodeParameter = id_node.HasValue ?
                new ObjectParameter("id_node", id_node) :
                new ObjectParameter("id_node", typeof(int));
    
            var n_orderParameter = n_order.HasValue ?
                new ObjectParameter("n_order", n_order) :
                new ObjectParameter("n_order", typeof(int));
    
            var transFlagParameter = transFlag.HasValue ?
                new ObjectParameter("TransFlag", transFlag) :
                new ObjectParameter("TransFlag", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ChangeOrderDefaultNode", id_nodeParameter, n_orderParameter, transFlagParameter);
        }
    
        public virtual int ChangeOrderDictValue(Nullable<int> id_attr, Nullable<int> id_col, Nullable<int> id_node, Nullable<int> n_order, Nullable<int> transFlag)
        {
            var id_attrParameter = id_attr.HasValue ?
                new ObjectParameter("id_attr", id_attr) :
                new ObjectParameter("id_attr", typeof(int));
    
            var id_colParameter = id_col.HasValue ?
                new ObjectParameter("id_col", id_col) :
                new ObjectParameter("id_col", typeof(int));
    
            var id_nodeParameter = id_node.HasValue ?
                new ObjectParameter("id_node", id_node) :
                new ObjectParameter("id_node", typeof(int));
    
            var n_orderParameter = n_order.HasValue ?
                new ObjectParameter("n_order", n_order) :
                new ObjectParameter("n_order", typeof(int));
    
            var transFlagParameter = transFlag.HasValue ?
                new ObjectParameter("TransFlag", transFlag) :
                new ObjectParameter("TransFlag", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ChangeOrderDictValue", id_attrParameter, id_colParameter, id_nodeParameter, n_orderParameter, transFlagParameter);
        }
    
        public virtual int ChangeOrderNode(Nullable<int> id_node, Nullable<int> n_order, Nullable<int> transFlag)
        {
            var id_nodeParameter = id_node.HasValue ?
                new ObjectParameter("id_node", id_node) :
                new ObjectParameter("id_node", typeof(int));
    
            var n_orderParameter = n_order.HasValue ?
                new ObjectParameter("n_order", n_order) :
                new ObjectParameter("n_order", typeof(int));
    
            var transFlagParameter = transFlag.HasValue ?
                new ObjectParameter("TransFlag", transFlag) :
                new ObjectParameter("TransFlag", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ChangeOrderNode", id_nodeParameter, n_orderParameter, transFlagParameter);
        }
    
        public virtual int ChangeOrderReport(Nullable<int> id_report, Nullable<int> n_order, Nullable<int> transFlag)
        {
            var id_reportParameter = id_report.HasValue ?
                new ObjectParameter("id_report", id_report) :
                new ObjectParameter("id_report", typeof(int));
    
            var n_orderParameter = n_order.HasValue ?
                new ObjectParameter("n_order", n_order) :
                new ObjectParameter("n_order", typeof(int));
    
            var transFlagParameter = transFlag.HasValue ?
                new ObjectParameter("TransFlag", transFlag) :
                new ObjectParameter("TransFlag", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ChangeOrderReport", id_reportParameter, n_orderParameter, transFlagParameter);
        }
    
        public virtual int ChildrenCount(Nullable<int> node_id)
        {
            var node_idParameter = node_id.HasValue ?
                new ObjectParameter("node_id", node_id) :
                new ObjectParameter("node_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ChildrenCount", node_idParameter);
        }
    
        public virtual int ClearImages(Nullable<int> id_type, Nullable<int> transFlag)
        {
            var id_typeParameter = id_type.HasValue ?
                new ObjectParameter("id_type", id_type) :
                new ObjectParameter("id_type", typeof(int));
    
            var transFlagParameter = transFlag.HasValue ?
                new ObjectParameter("TransFlag", transFlag) :
                new ObjectParameter("TransFlag", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ClearImages", id_typeParameter, transFlagParameter);
        }
    
        public virtual int CopyAttrs(Nullable<int> id_nodenew, Nullable<int> id_nodeold)
        {
            var id_nodenewParameter = id_nodenew.HasValue ?
                new ObjectParameter("id_nodenew", id_nodenew) :
                new ObjectParameter("id_nodenew", typeof(int));
    
            var id_nodeoldParameter = id_nodeold.HasValue ?
                new ObjectParameter("id_nodeold", id_nodeold) :
                new ObjectParameter("id_nodeold", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CopyAttrs", id_nodenewParameter, id_nodeoldParameter);
        }
    
        public virtual int CopyChildNode(Nullable<int> node, Nullable<int> archnode, Nullable<int> id_user1, Nullable<int> mode, Nullable<int> transFlag)
        {
            var nodeParameter = node.HasValue ?
                new ObjectParameter("node", node) :
                new ObjectParameter("node", typeof(int));
    
            var archnodeParameter = archnode.HasValue ?
                new ObjectParameter("archnode", archnode) :
                new ObjectParameter("archnode", typeof(int));
    
            var id_user1Parameter = id_user1.HasValue ?
                new ObjectParameter("id_user1", id_user1) :
                new ObjectParameter("id_user1", typeof(int));
    
            var modeParameter = mode.HasValue ?
                new ObjectParameter("mode", mode) :
                new ObjectParameter("mode", typeof(int));
    
            var transFlagParameter = transFlag.HasValue ?
                new ObjectParameter("TransFlag", transFlag) :
                new ObjectParameter("TransFlag", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CopyChildNode", nodeParameter, archnodeParameter, id_user1Parameter, modeParameter, transFlagParameter);
        }
    
        public virtual int CopyDictValue(Nullable<int> id_attr1, Nullable<int> id_col1, Nullable<int> node, Nullable<int> new_parent, Nullable<int> transFlag)
        {
            var id_attr1Parameter = id_attr1.HasValue ?
                new ObjectParameter("id_attr1", id_attr1) :
                new ObjectParameter("id_attr1", typeof(int));
    
            var id_col1Parameter = id_col1.HasValue ?
                new ObjectParameter("id_col1", id_col1) :
                new ObjectParameter("id_col1", typeof(int));
    
            var nodeParameter = node.HasValue ?
                new ObjectParameter("node", node) :
                new ObjectParameter("node", typeof(int));
    
            var new_parentParameter = new_parent.HasValue ?
                new ObjectParameter("new_parent", new_parent) :
                new ObjectParameter("new_parent", typeof(int));
    
            var transFlagParameter = transFlag.HasValue ?
                new ObjectParameter("TransFlag", transFlag) :
                new ObjectParameter("TransFlag", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CopyDictValue", id_attr1Parameter, id_col1Parameter, nodeParameter, new_parentParameter, transFlagParameter);
        }
    
        public virtual int CopyNode(Nullable<int> node, Nullable<int> new_parent, Nullable<int> id_user1, Nullable<int> copychild, Nullable<int> mode, Nullable<int> nocopy_node, Nullable<int> history_node, Nullable<int> history_parent, Nullable<int> transFlag)
        {
            var nodeParameter = node.HasValue ?
                new ObjectParameter("node", node) :
                new ObjectParameter("node", typeof(int));
    
            var new_parentParameter = new_parent.HasValue ?
                new ObjectParameter("new_parent", new_parent) :
                new ObjectParameter("new_parent", typeof(int));
    
            var id_user1Parameter = id_user1.HasValue ?
                new ObjectParameter("id_user1", id_user1) :
                new ObjectParameter("id_user1", typeof(int));
    
            var copychildParameter = copychild.HasValue ?
                new ObjectParameter("copychild", copychild) :
                new ObjectParameter("copychild", typeof(int));
    
            var modeParameter = mode.HasValue ?
                new ObjectParameter("mode", mode) :
                new ObjectParameter("mode", typeof(int));
    
            var nocopy_nodeParameter = nocopy_node.HasValue ?
                new ObjectParameter("nocopy_node", nocopy_node) :
                new ObjectParameter("nocopy_node", typeof(int));
    
            var history_nodeParameter = history_node.HasValue ?
                new ObjectParameter("history_node", history_node) :
                new ObjectParameter("history_node", typeof(int));
    
            var history_parentParameter = history_parent.HasValue ?
                new ObjectParameter("history_parent", history_parent) :
                new ObjectParameter("history_parent", typeof(int));
    
            var transFlagParameter = transFlag.HasValue ?
                new ObjectParameter("TransFlag", transFlag) :
                new ObjectParameter("TransFlag", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CopyNode", nodeParameter, new_parentParameter, id_user1Parameter, copychildParameter, modeParameter, nocopy_nodeParameter, history_nodeParameter, history_parentParameter, transFlagParameter);
        }
    
        public virtual int createChildrensChain(Nullable<int> rootNodeId)
        {
            var rootNodeIdParameter = rootNodeId.HasValue ?
                new ObjectParameter("rootNodeId", rootNodeId) :
                new ObjectParameter("rootNodeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("createChildrensChain", rootNodeIdParameter);
        }
    
        public virtual int createCorellatedNode(Nullable<int> remotenodeId, Nullable<int> remoteregionId, Nullable<int> defaultParentId, Nullable<int> remoteParentId, Nullable<int> itemtypeId, string strLabel, Nullable<int> userId)
        {
            var remotenodeIdParameter = remotenodeId.HasValue ?
                new ObjectParameter("remotenodeId", remotenodeId) :
                new ObjectParameter("remotenodeId", typeof(int));
    
            var remoteregionIdParameter = remoteregionId.HasValue ?
                new ObjectParameter("remoteregionId", remoteregionId) :
                new ObjectParameter("remoteregionId", typeof(int));
    
            var defaultParentIdParameter = defaultParentId.HasValue ?
                new ObjectParameter("defaultParentId", defaultParentId) :
                new ObjectParameter("defaultParentId", typeof(int));
    
            var remoteParentIdParameter = remoteParentId.HasValue ?
                new ObjectParameter("remoteParentId", remoteParentId) :
                new ObjectParameter("remoteParentId", typeof(int));
    
            var itemtypeIdParameter = itemtypeId.HasValue ?
                new ObjectParameter("itemtypeId", itemtypeId) :
                new ObjectParameter("itemtypeId", typeof(int));
    
            var strLabelParameter = strLabel != null ?
                new ObjectParameter("strLabel", strLabel) :
                new ObjectParameter("strLabel", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("createCorellatedNode", remotenodeIdParameter, remoteregionIdParameter, defaultParentIdParameter, remoteParentIdParameter, itemtypeIdParameter, strLabelParameter, userIdParameter);
        }
    
        public virtual int createParentsChain(Nullable<int> rootNodeId, Nullable<int> childParentId)
        {
            var rootNodeIdParameter = rootNodeId.HasValue ?
                new ObjectParameter("rootNodeId", rootNodeId) :
                new ObjectParameter("rootNodeId", typeof(int));
    
            var childParentIdParameter = childParentId.HasValue ?
                new ObjectParameter("childParentId", childParentId) :
                new ObjectParameter("childParentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("createParentsChain", rootNodeIdParameter, childParentIdParameter);
        }
    
        public virtual int DeleteAttr(Nullable<int> id_attr, Nullable<int> id_type, Nullable<int> transFlag)
        {
            var id_attrParameter = id_attr.HasValue ?
                new ObjectParameter("id_attr", id_attr) :
                new ObjectParameter("id_attr", typeof(int));
    
            var id_typeParameter = id_type.HasValue ?
                new ObjectParameter("id_type", id_type) :
                new ObjectParameter("id_type", typeof(int));
    
            var transFlagParameter = transFlag.HasValue ?
                new ObjectParameter("TransFlag", transFlag) :
                new ObjectParameter("TransFlag", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteAttr", id_attrParameter, id_typeParameter, transFlagParameter);
        }
    
        public virtual int deleteCorellatedNode(Nullable<int> remotenodeId, Nullable<int> remoteregionId)
        {
            var remotenodeIdParameter = remotenodeId.HasValue ?
                new ObjectParameter("remotenodeId", remotenodeId) :
                new ObjectParameter("remotenodeId", typeof(int));
    
            var remoteregionIdParameter = remoteregionId.HasValue ?
                new ObjectParameter("remoteregionId", remoteregionId) :
                new ObjectParameter("remoteregionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("deleteCorellatedNode", remotenodeIdParameter, remoteregionIdParameter);
        }
    
        public virtual int DeleteDefaultNode(Nullable<int> id_node, Nullable<int> transFlag)
        {
            var id_nodeParameter = id_node.HasValue ?
                new ObjectParameter("id_node", id_node) :
                new ObjectParameter("id_node", typeof(int));
    
            var transFlagParameter = transFlag.HasValue ?
                new ObjectParameter("TransFlag", transFlag) :
                new ObjectParameter("TransFlag", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteDefaultNode", id_nodeParameter, transFlagParameter);
        }
    
        public virtual int DeleteDefaultType(Nullable<int> id_itemtype, Nullable<int> transFlag)
        {
            var id_itemtypeParameter = id_itemtype.HasValue ?
                new ObjectParameter("id_itemtype", id_itemtype) :
                new ObjectParameter("id_itemtype", typeof(int));
    
            var transFlagParameter = transFlag.HasValue ?
                new ObjectParameter("TransFlag", transFlag) :
                new ObjectParameter("TransFlag", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteDefaultType", id_itemtypeParameter, transFlagParameter);
        }
    
        public virtual int DeleteDictValue(Nullable<int> id_node, Nullable<int> id_attr, Nullable<int> id_col, Nullable<int> transFlag)
        {
            var id_nodeParameter = id_node.HasValue ?
                new ObjectParameter("id_node", id_node) :
                new ObjectParameter("id_node", typeof(int));
    
            var id_attrParameter = id_attr.HasValue ?
                new ObjectParameter("id_attr", id_attr) :
                new ObjectParameter("id_attr", typeof(int));
    
            var id_colParameter = id_col.HasValue ?
                new ObjectParameter("id_col", id_col) :
                new ObjectParameter("id_col", typeof(int));
    
            var transFlagParameter = transFlag.HasValue ?
                new ObjectParameter("TransFlag", transFlag) :
                new ObjectParameter("TransFlag", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteDictValue", id_nodeParameter, id_attrParameter, id_colParameter, transFlagParameter);
        }
    
        public virtual int DeleteEventAction(Nullable<int> id_nodeaction, Nullable<int> transFlag)
        {
            var id_nodeactionParameter = id_nodeaction.HasValue ?
                new ObjectParameter("id_nodeaction", id_nodeaction) :
                new ObjectParameter("id_nodeaction", typeof(int));
    
            var transFlagParameter = transFlag.HasValue ?
                new ObjectParameter("TransFlag", transFlag) :
                new ObjectParameter("TransFlag", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteEventAction", id_nodeactionParameter, transFlagParameter);
        }
    
        public virtual int DeleteFaceAttr(Nullable<int> id, Nullable<int> transFlag)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var transFlagParameter = transFlag.HasValue ?
                new ObjectParameter("TransFlag", transFlag) :
                new ObjectParameter("TransFlag", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteFaceAttr", idParameter, transFlagParameter);
        }
    
        public virtual int DeleteFavourite(Nullable<int> id_fav, Nullable<int> transFlag)
        {
            var id_favParameter = id_fav.HasValue ?
                new ObjectParameter("id_fav", id_fav) :
                new ObjectParameter("id_fav", typeof(int));
    
            var transFlagParameter = transFlag.HasValue ?
                new ObjectParameter("TransFlag", transFlag) :
                new ObjectParameter("TransFlag", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteFavourite", id_favParameter, transFlagParameter);
        }
    
        public virtual int DeleteGroup(Nullable<int> id_group, Nullable<int> transFlag)
        {
            var id_groupParameter = id_group.HasValue ?
                new ObjectParameter("id_group", id_group) :
                new ObjectParameter("id_group", typeof(int));
    
            var transFlagParameter = transFlag.HasValue ?
                new ObjectParameter("TransFlag", transFlag) :
                new ObjectParameter("TransFlag", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteGroup", id_groupParameter, transFlagParameter);
        }
    
        public virtual int DeleteItemType(Nullable<int> id_type, Nullable<int> transFlag)
        {
            var id_typeParameter = id_type.HasValue ?
                new ObjectParameter("id_type", id_type) :
                new ObjectParameter("id_type", typeof(int));
    
            var transFlagParameter = transFlag.HasValue ?
                new ObjectParameter("TransFlag", transFlag) :
                new ObjectParameter("TransFlag", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteItemType", id_typeParameter, transFlagParameter);
        }
    
        public virtual int DeleteNode(Nullable<int> id_node, Nullable<bool> childOnly, Nullable<int> nodel_node, Nullable<int> history_node, Nullable<int> history_parent, Nullable<int> transFlag)
        {
            var id_nodeParameter = id_node.HasValue ?
                new ObjectParameter("id_node", id_node) :
                new ObjectParameter("id_node", typeof(int));
    
            var childOnlyParameter = childOnly.HasValue ?
                new ObjectParameter("ChildOnly", childOnly) :
                new ObjectParameter("ChildOnly", typeof(bool));
    
            var nodel_nodeParameter = nodel_node.HasValue ?
                new ObjectParameter("nodel_node", nodel_node) :
                new ObjectParameter("nodel_node", typeof(int));
    
            var history_nodeParameter = history_node.HasValue ?
                new ObjectParameter("history_node", history_node) :
                new ObjectParameter("history_node", typeof(int));
    
            var history_parentParameter = history_parent.HasValue ?
                new ObjectParameter("history_parent", history_parent) :
                new ObjectParameter("history_parent", typeof(int));
    
            var transFlagParameter = transFlag.HasValue ?
                new ObjectParameter("TransFlag", transFlag) :
                new ObjectParameter("TransFlag", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteNode", id_nodeParameter, childOnlyParameter, nodel_nodeParameter, history_nodeParameter, history_parentParameter, transFlagParameter);
        }
    
        public virtual int DeleteRefTree(Nullable<int> id_tree, Nullable<int> transFlag)
        {
            var id_treeParameter = id_tree.HasValue ?
                new ObjectParameter("id_tree", id_tree) :
                new ObjectParameter("id_tree", typeof(int));
    
            var transFlagParameter = transFlag.HasValue ?
                new ObjectParameter("TransFlag", transFlag) :
                new ObjectParameter("TransFlag", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteRefTree", id_treeParameter, transFlagParameter);
        }
    
        public virtual int DeleteReport(Nullable<int> id_report, Nullable<int> transFlag)
        {
            var id_reportParameter = id_report.HasValue ?
                new ObjectParameter("id_report", id_report) :
                new ObjectParameter("id_report", typeof(int));
    
            var transFlagParameter = transFlag.HasValue ?
                new ObjectParameter("TransFlag", transFlag) :
                new ObjectParameter("TransFlag", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteReport", id_reportParameter, transFlagParameter);
        }
    
        public virtual int DeleteReportWord(Nullable<int> id_report, Nullable<int> transFlag)
        {
            var id_reportParameter = id_report.HasValue ?
                new ObjectParameter("id_report", id_report) :
                new ObjectParameter("id_report", typeof(int));
    
            var transFlagParameter = transFlag.HasValue ?
                new ObjectParameter("TransFlag", transFlag) :
                new ObjectParameter("TransFlag", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteReportWord", id_reportParameter, transFlagParameter);
        }
    
        public virtual int DeleteRole(Nullable<int> id_role, Nullable<int> id_type, Nullable<int> transFlag)
        {
            var id_roleParameter = id_role.HasValue ?
                new ObjectParameter("id_role", id_role) :
                new ObjectParameter("id_role", typeof(int));
    
            var id_typeParameter = id_type.HasValue ?
                new ObjectParameter("id_type", id_type) :
                new ObjectParameter("id_type", typeof(int));
    
            var transFlagParameter = transFlag.HasValue ?
                new ObjectParameter("TransFlag", transFlag) :
                new ObjectParameter("TransFlag", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteRole", id_roleParameter, id_typeParameter, transFlagParameter);
        }
    
        public virtual int DeleteTree(Nullable<int> id_tree, Nullable<int> transFlag)
        {
            var id_treeParameter = id_tree.HasValue ?
                new ObjectParameter("id_tree", id_tree) :
                new ObjectParameter("id_tree", typeof(int));
    
            var transFlagParameter = transFlag.HasValue ?
                new ObjectParameter("TransFlag", transFlag) :
                new ObjectParameter("TransFlag", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteTree", id_treeParameter, transFlagParameter);
        }
    
        public virtual int DeleteUser(Nullable<int> id_user, Nullable<int> transFlag)
        {
            var id_userParameter = id_user.HasValue ?
                new ObjectParameter("id_user", id_user) :
                new ObjectParameter("id_user", typeof(int));
    
            var transFlagParameter = transFlag.HasValue ?
                new ObjectParameter("TransFlag", transFlag) :
                new ObjectParameter("TransFlag", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteUser", id_userParameter, transFlagParameter);
        }
    
        public virtual int DelNodeGroup(Nullable<int> id_node, Nullable<int> id_group, Nullable<int> perm)
        {
            var id_nodeParameter = id_node.HasValue ?
                new ObjectParameter("id_node", id_node) :
                new ObjectParameter("id_node", typeof(int));
    
            var id_groupParameter = id_group.HasValue ?
                new ObjectParameter("id_group", id_group) :
                new ObjectParameter("id_group", typeof(int));
    
            var permParameter = perm.HasValue ?
                new ObjectParameter("perm", perm) :
                new ObjectParameter("perm", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DelNodeGroup", id_nodeParameter, id_groupParameter, permParameter);
        }
    
        public virtual int DelNodeGroup1(Nullable<int> id_node)
        {
            var id_nodeParameter = id_node.HasValue ?
                new ObjectParameter("id_node", id_node) :
                new ObjectParameter("id_node", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DelNodeGroup1", id_nodeParameter);
        }
    
        public virtual int GetAipConfValue(Nullable<int> id, ObjectParameter val)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetAipConfValue", idParameter, val);
        }
    
        public virtual int GetAipSysConfValue(Nullable<int> config, ObjectParameter char_value)
        {
            var configParameter = config.HasValue ?
                new ObjectParameter("config", config) :
                new ObjectParameter("config", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetAipSysConfValue", configParameter, char_value);
        }
    
        public virtual int GetAipUserInfoByLogin(string str_login, byte[] bin_password, string host, ObjectParameter b_disabled, ObjectParameter is_admin, ObjectParameter dblogin, ObjectParameter dbpwd, Nullable<bool> ad)
        {
            var str_loginParameter = str_login != null ?
                new ObjectParameter("str_login", str_login) :
                new ObjectParameter("str_login", typeof(string));
    
            var bin_passwordParameter = bin_password != null ?
                new ObjectParameter("bin_password", bin_password) :
                new ObjectParameter("bin_password", typeof(byte[]));
    
            var hostParameter = host != null ?
                new ObjectParameter("host", host) :
                new ObjectParameter("host", typeof(string));
    
            var adParameter = ad.HasValue ?
                new ObjectParameter("ad", ad) :
                new ObjectParameter("ad", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetAipUserInfoByLogin", str_loginParameter, bin_passwordParameter, hostParameter, b_disabled, is_admin, dblogin, dbpwd, adParameter);
        }
    
        public virtual int GetAllCount(Nullable<int> id_node)
        {
            var id_nodeParameter = id_node.HasValue ?
                new ObjectParameter("id_node", id_node) :
                new ObjectParameter("id_node", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetAllCount", id_nodeParameter);
        }
    
        public virtual int GetAncestorVisibleInfo(Nullable<int> id_node, Nullable<int> id_group, ObjectParameter aid)
        {
            var id_nodeParameter = id_node.HasValue ?
                new ObjectParameter("id_node", id_node) :
                new ObjectParameter("id_node", typeof(int));
    
            var id_groupParameter = id_group.HasValue ?
                new ObjectParameter("id_group", id_group) :
                new ObjectParameter("id_group", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetAncestorVisibleInfo", id_nodeParameter, id_groupParameter, aid);
        }
    
        public virtual int GetAutoFolder(Nullable<int> id_node, Nullable<int> id_attr, Nullable<int> idt, Nullable<int> idn, Nullable<int> mode)
        {
            var id_nodeParameter = id_node.HasValue ?
                new ObjectParameter("id_node", id_node) :
                new ObjectParameter("id_node", typeof(int));
    
            var id_attrParameter = id_attr.HasValue ?
                new ObjectParameter("id_attr", id_attr) :
                new ObjectParameter("id_attr", typeof(int));
    
            var idtParameter = idt.HasValue ?
                new ObjectParameter("idt", idt) :
                new ObjectParameter("idt", typeof(int));
    
            var idnParameter = idn.HasValue ?
                new ObjectParameter("idn", idn) :
                new ObjectParameter("idn", typeof(int));
    
            var modeParameter = mode.HasValue ?
                new ObjectParameter("mode", mode) :
                new ObjectParameter("mode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetAutoFolder", id_nodeParameter, id_attrParameter, idtParameter, idnParameter, modeParameter);
        }
    
        public virtual int GetAutoParent(Nullable<int> id_node, Nullable<int> id_attr)
        {
            var id_nodeParameter = id_node.HasValue ?
                new ObjectParameter("id_node", id_node) :
                new ObjectParameter("id_node", typeof(int));
    
            var id_attrParameter = id_attr.HasValue ?
                new ObjectParameter("id_attr", id_attr) :
                new ObjectParameter("id_attr", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetAutoParent", id_nodeParameter, id_attrParameter);
        }
    
        public virtual ObjectResult<GetChildRenameFileNames_Result> GetChildRenameFileNames(Nullable<int> node)
        {
            var nodeParameter = node.HasValue ?
                new ObjectParameter("node", node) :
                new ObjectParameter("node", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetChildRenameFileNames_Result>("GetChildRenameFileNames", nodeParameter);
        }
    
        public virtual int GetDefaultType(Nullable<int> id_defnode)
        {
            var id_defnodeParameter = id_defnode.HasValue ?
                new ObjectParameter("id_defnode", id_defnode) :
                new ObjectParameter("id_defnode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetDefaultType", id_defnodeParameter);
        }
    
        public virtual int GetDefaultValue(Nullable<int> id_node, Nullable<int> id_attr)
        {
            var id_nodeParameter = id_node.HasValue ?
                new ObjectParameter("id_node", id_node) :
                new ObjectParameter("id_node", typeof(int));
    
            var id_attrParameter = id_attr.HasValue ?
                new ObjectParameter("id_attr", id_attr) :
                new ObjectParameter("id_attr", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetDefaultValue", id_nodeParameter, id_attrParameter);
        }
    
        public virtual int GetFirstNodeByParent(Nullable<int> id_p, Nullable<int> id_type, Nullable<int> sortmode, ObjectParameter resn)
        {
            var id_pParameter = id_p.HasValue ?
                new ObjectParameter("id_p", id_p) :
                new ObjectParameter("id_p", typeof(int));
    
            var id_typeParameter = id_type.HasValue ?
                new ObjectParameter("id_type", id_type) :
                new ObjectParameter("id_type", typeof(int));
    
            var sortmodeParameter = sortmode.HasValue ?
                new ObjectParameter("sortmode", sortmode) :
                new ObjectParameter("sortmode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetFirstNodeByParent", id_pParameter, id_typeParameter, sortmodeParameter, resn);
        }
    
        public virtual int GetFullPath(Nullable<int> id_node, ObjectParameter str_path)
        {
            var id_nodeParameter = id_node.HasValue ?
                new ObjectParameter("id_node", id_node) :
                new ObjectParameter("id_node", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetFullPath", id_nodeParameter, str_path);
        }
    
        public virtual int GetItemType(Nullable<int> id_node)
        {
            var id_nodeParameter = id_node.HasValue ?
                new ObjectParameter("id_node", id_node) :
                new ObjectParameter("id_node", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetItemType", id_nodeParameter);
        }
    
        public virtual int GetMaxLevel(Nullable<int> id_node)
        {
            var id_nodeParameter = id_node.HasValue ?
                new ObjectParameter("id_node", id_node) :
                new ObjectParameter("id_node", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetMaxLevel", id_nodeParameter);
        }
    
        public virtual int GetNearestNode(Nullable<int> id_current, Nullable<int> id_type, string str_label)
        {
            var id_currentParameter = id_current.HasValue ?
                new ObjectParameter("id_current", id_current) :
                new ObjectParameter("id_current", typeof(int));
    
            var id_typeParameter = id_type.HasValue ?
                new ObjectParameter("id_type", id_type) :
                new ObjectParameter("id_type", typeof(int));
    
            var str_labelParameter = str_label != null ?
                new ObjectParameter("str_label", str_label) :
                new ObjectParameter("str_label", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetNearestNode", id_currentParameter, id_typeParameter, str_labelParameter);
        }
    
        public virtual int GetNearParent(Nullable<int> id_card, Nullable<int> id_oldParent, Nullable<int> id_newParent)
        {
            var id_cardParameter = id_card.HasValue ?
                new ObjectParameter("id_card", id_card) :
                new ObjectParameter("id_card", typeof(int));
    
            var id_oldParentParameter = id_oldParent.HasValue ?
                new ObjectParameter("id_oldParent", id_oldParent) :
                new ObjectParameter("id_oldParent", typeof(int));
    
            var id_newParentParameter = id_newParent.HasValue ?
                new ObjectParameter("id_newParent", id_newParent) :
                new ObjectParameter("id_newParent", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetNearParent", id_cardParameter, id_oldParentParameter, id_newParentParameter);
        }
    
        public virtual int GetNextSeq_Num(Nullable<int> mode)
        {
            var modeParameter = mode.HasValue ?
                new ObjectParameter("mode", mode) :
                new ObjectParameter("mode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetNextSeq_Num", modeParameter);
        }
    
        public virtual int GetParentByType(Nullable<int> id_node, Nullable<int> id_itemtype)
        {
            var id_nodeParameter = id_node.HasValue ?
                new ObjectParameter("id_node", id_node) :
                new ObjectParameter("id_node", typeof(int));
    
            var id_itemtypeParameter = id_itemtype.HasValue ?
                new ObjectParameter("id_itemtype", id_itemtype) :
                new ObjectParameter("id_itemtype", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetParentByType", id_nodeParameter, id_itemtypeParameter);
        }
    
        public virtual int GetPermission(Nullable<int> id_node, Nullable<int> id_user)
        {
            var id_nodeParameter = id_node.HasValue ?
                new ObjectParameter("id_node", id_node) :
                new ObjectParameter("id_node", typeof(int));
    
            var id_userParameter = id_user.HasValue ?
                new ObjectParameter("id_user", id_user) :
                new ObjectParameter("id_user", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetPermission", id_nodeParameter, id_userParameter);
        }
    
        public virtual int GetTypesCount()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetTypesCount");
        }
    
        public virtual int GetUserRights(Nullable<int> id_user)
        {
            var id_userParameter = id_user.HasValue ?
                new ObjectParameter("id_user", id_user) :
                new ObjectParameter("id_user", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetUserRights", id_userParameter);
        }
    
        public virtual int ifexistCorellatedNode(Nullable<int> remotenodeId, Nullable<int> remoteregionId)
        {
            var remotenodeIdParameter = remotenodeId.HasValue ?
                new ObjectParameter("remotenodeId", remotenodeId) :
                new ObjectParameter("remotenodeId", typeof(int));
    
            var remoteregionIdParameter = remoteregionId.HasValue ?
                new ObjectParameter("remoteregionId", remoteregionId) :
                new ObjectParameter("remoteregionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ifexistCorellatedNode", remotenodeIdParameter, remoteregionIdParameter);
        }
    
        public virtual int InsertAttrControlXml(Nullable<int> id_attr, Nullable<int> id_type, string str_name, Nullable<int> is_default, Nullable<int> id_role, Nullable<int> transFlag)
        {
            var id_attrParameter = id_attr.HasValue ?
                new ObjectParameter("id_attr", id_attr) :
                new ObjectParameter("id_attr", typeof(int));
    
            var id_typeParameter = id_type.HasValue ?
                new ObjectParameter("id_type", id_type) :
                new ObjectParameter("id_type", typeof(int));
    
            var str_nameParameter = str_name != null ?
                new ObjectParameter("str_name", str_name) :
                new ObjectParameter("str_name", typeof(string));
    
            var is_defaultParameter = is_default.HasValue ?
                new ObjectParameter("is_default", is_default) :
                new ObjectParameter("is_default", typeof(int));
    
            var id_roleParameter = id_role.HasValue ?
                new ObjectParameter("id_role", id_role) :
                new ObjectParameter("id_role", typeof(int));
    
            var transFlagParameter = transFlag.HasValue ?
                new ObjectParameter("TransFlag", transFlag) :
                new ObjectParameter("TransFlag", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertAttrControlXml", id_attrParameter, id_typeParameter, str_nameParameter, is_defaultParameter, id_roleParameter, transFlagParameter);
        }
    
        public virtual int InsertAutoRef(Nullable<int> id_attr, Nullable<int> id_type, Nullable<int> id_col, Nullable<int> int_width, Nullable<int> id_defaultnode, string id_childattr, string str_col, Nullable<int> transFlag)
        {
            var id_attrParameter = id_attr.HasValue ?
                new ObjectParameter("id_attr", id_attr) :
                new ObjectParameter("id_attr", typeof(int));
    
            var id_typeParameter = id_type.HasValue ?
                new ObjectParameter("id_type", id_type) :
                new ObjectParameter("id_type", typeof(int));
    
            var id_colParameter = id_col.HasValue ?
                new ObjectParameter("id_col", id_col) :
                new ObjectParameter("id_col", typeof(int));
    
            var int_widthParameter = int_width.HasValue ?
                new ObjectParameter("int_width", int_width) :
                new ObjectParameter("int_width", typeof(int));
    
            var id_defaultnodeParameter = id_defaultnode.HasValue ?
                new ObjectParameter("id_defaultnode", id_defaultnode) :
                new ObjectParameter("id_defaultnode", typeof(int));
    
            var id_childattrParameter = id_childattr != null ?
                new ObjectParameter("id_childattr", id_childattr) :
                new ObjectParameter("id_childattr", typeof(string));
    
            var str_colParameter = str_col != null ?
                new ObjectParameter("str_col", str_col) :
                new ObjectParameter("str_col", typeof(string));
    
            var transFlagParameter = transFlag.HasValue ?
                new ObjectParameter("TransFlag", transFlag) :
                new ObjectParameter("TransFlag", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertAutoRef", id_attrParameter, id_typeParameter, id_colParameter, int_widthParameter, id_defaultnodeParameter, id_childattrParameter, str_colParameter, transFlagParameter);
        }
    
        public virtual int InsertDefaultNode(Nullable<int> id_node, Nullable<int> id_parent, Nullable<int> id_itemtype, Nullable<int> n_order, ObjectParameter str_label, Nullable<int> transFlag)
        {
            var id_nodeParameter = id_node.HasValue ?
                new ObjectParameter("id_node", id_node) :
                new ObjectParameter("id_node", typeof(int));
    
            var id_parentParameter = id_parent.HasValue ?
                new ObjectParameter("id_parent", id_parent) :
                new ObjectParameter("id_parent", typeof(int));
    
            var id_itemtypeParameter = id_itemtype.HasValue ?
                new ObjectParameter("id_itemtype", id_itemtype) :
                new ObjectParameter("id_itemtype", typeof(int));
    
            var n_orderParameter = n_order.HasValue ?
                new ObjectParameter("n_order", n_order) :
                new ObjectParameter("n_order", typeof(int));
    
            var transFlagParameter = transFlag.HasValue ?
                new ObjectParameter("TransFlag", transFlag) :
                new ObjectParameter("TransFlag", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertDefaultNode", id_nodeParameter, id_parentParameter, id_itemtypeParameter, n_orderParameter, str_label, transFlagParameter);
        }
    
        public virtual int InsertDictNode(Nullable<int> id_attr, string str_name, Nullable<int> id_col, Nullable<int> id_parent, string str_label, Nullable<int> n_order, Nullable<int> transFlag)
        {
            var id_attrParameter = id_attr.HasValue ?
                new ObjectParameter("id_attr", id_attr) :
                new ObjectParameter("id_attr", typeof(int));
    
            var str_nameParameter = str_name != null ?
                new ObjectParameter("str_name", str_name) :
                new ObjectParameter("str_name", typeof(string));
    
            var id_colParameter = id_col.HasValue ?
                new ObjectParameter("id_col", id_col) :
                new ObjectParameter("id_col", typeof(int));
    
            var id_parentParameter = id_parent.HasValue ?
                new ObjectParameter("id_parent", id_parent) :
                new ObjectParameter("id_parent", typeof(int));
    
            var str_labelParameter = str_label != null ?
                new ObjectParameter("str_label", str_label) :
                new ObjectParameter("str_label", typeof(string));
    
            var n_orderParameter = n_order.HasValue ?
                new ObjectParameter("n_order", n_order) :
                new ObjectParameter("n_order", typeof(int));
    
            var transFlagParameter = transFlag.HasValue ?
                new ObjectParameter("TransFlag", transFlag) :
                new ObjectParameter("TransFlag", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertDictNode", id_attrParameter, str_nameParameter, id_colParameter, id_parentParameter, str_labelParameter, n_orderParameter, transFlagParameter);
        }
    
        public virtual int InsertDictValue(Nullable<int> id_attr, string str_name, Nullable<int> id_col, Nullable<int> transFlag)
        {
            var id_attrParameter = id_attr.HasValue ?
                new ObjectParameter("id_attr", id_attr) :
                new ObjectParameter("id_attr", typeof(int));
    
            var str_nameParameter = str_name != null ?
                new ObjectParameter("str_name", str_name) :
                new ObjectParameter("str_name", typeof(string));
    
            var id_colParameter = id_col.HasValue ?
                new ObjectParameter("id_col", id_col) :
                new ObjectParameter("id_col", typeof(int));
    
            var transFlagParameter = transFlag.HasValue ?
                new ObjectParameter("TransFlag", transFlag) :
                new ObjectParameter("TransFlag", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertDictValue", id_attrParameter, str_nameParameter, id_colParameter, transFlagParameter);
        }
    
        public virtual int InsertGroup(Nullable<int> id_group, string str_name, Nullable<int> n_right, string description)
        {
            var id_groupParameter = id_group.HasValue ?
                new ObjectParameter("id_group", id_group) :
                new ObjectParameter("id_group", typeof(int));
    
            var str_nameParameter = str_name != null ?
                new ObjectParameter("str_name", str_name) :
                new ObjectParameter("str_name", typeof(string));
    
            var n_rightParameter = n_right.HasValue ?
                new ObjectParameter("n_right", n_right) :
                new ObjectParameter("n_right", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertGroup", id_groupParameter, str_nameParameter, n_rightParameter, descriptionParameter);
        }
    
        public virtual int InsertImage(Nullable<int> id_type, Nullable<int> id_role)
        {
            var id_typeParameter = id_type.HasValue ?
                new ObjectParameter("id_type", id_type) :
                new ObjectParameter("id_type", typeof(int));
    
            var id_roleParameter = id_role.HasValue ?
                new ObjectParameter("id_role", id_role) :
                new ObjectParameter("id_role", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertImage", id_typeParameter, id_roleParameter);
        }
    
        public virtual int InsertItemDoc(Nullable<int> id_node, string str_docfile, Nullable<int> transFlag)
        {
            var id_nodeParameter = id_node.HasValue ?
                new ObjectParameter("id_node", id_node) :
                new ObjectParameter("id_node", typeof(int));
    
            var str_docfileParameter = str_docfile != null ?
                new ObjectParameter("str_docfile", str_docfile) :
                new ObjectParameter("str_docfile", typeof(string));
    
            var transFlagParameter = transFlag.HasValue ?
                new ObjectParameter("TransFlag", transFlag) :
                new ObjectParameter("TransFlag", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertItemDoc", id_nodeParameter, str_docfileParameter, transFlagParameter);
        }
    
        public virtual int InsertNode(Nullable<int> id_node, Nullable<int> id_parent, Nullable<int> id_itemtype, Nullable<int> n_order, Nullable<int> n_mode, ObjectParameter str_label, Nullable<System.DateTime> date_last, Nullable<System.DateTime> date_create, Nullable<int> id_user, Nullable<int> history_node, Nullable<int> history_parent, ObjectParameter id_newnode, Nullable<int> transFlag)
        {
            var id_nodeParameter = id_node.HasValue ?
                new ObjectParameter("id_node", id_node) :
                new ObjectParameter("id_node", typeof(int));
    
            var id_parentParameter = id_parent.HasValue ?
                new ObjectParameter("id_parent", id_parent) :
                new ObjectParameter("id_parent", typeof(int));
    
            var id_itemtypeParameter = id_itemtype.HasValue ?
                new ObjectParameter("id_itemtype", id_itemtype) :
                new ObjectParameter("id_itemtype", typeof(int));
    
            var n_orderParameter = n_order.HasValue ?
                new ObjectParameter("n_order", n_order) :
                new ObjectParameter("n_order", typeof(int));
    
            var n_modeParameter = n_mode.HasValue ?
                new ObjectParameter("n_mode", n_mode) :
                new ObjectParameter("n_mode", typeof(int));
    
            var date_lastParameter = date_last.HasValue ?
                new ObjectParameter("date_last", date_last) :
                new ObjectParameter("date_last", typeof(System.DateTime));
    
            var date_createParameter = date_create.HasValue ?
                new ObjectParameter("date_create", date_create) :
                new ObjectParameter("date_create", typeof(System.DateTime));
    
            var id_userParameter = id_user.HasValue ?
                new ObjectParameter("id_user", id_user) :
                new ObjectParameter("id_user", typeof(int));
    
            var history_nodeParameter = history_node.HasValue ?
                new ObjectParameter("history_node", history_node) :
                new ObjectParameter("history_node", typeof(int));
    
            var history_parentParameter = history_parent.HasValue ?
                new ObjectParameter("history_parent", history_parent) :
                new ObjectParameter("history_parent", typeof(int));
    
            var transFlagParameter = transFlag.HasValue ?
                new ObjectParameter("TransFlag", transFlag) :
                new ObjectParameter("TransFlag", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertNode", id_nodeParameter, id_parentParameter, id_itemtypeParameter, n_orderParameter, n_modeParameter, str_label, date_lastParameter, date_createParameter, id_userParameter, history_nodeParameter, history_parentParameter, id_newnode, transFlagParameter);
        }
    
        public virtual int InsertNode2(Nullable<int> id_node, Nullable<int> id_parent, Nullable<int> id_itemtype, Nullable<int> n_order, Nullable<int> n_mode, ObjectParameter str_label, Nullable<System.DateTime> date_last, Nullable<System.DateTime> date_create, Nullable<int> id_user, Nullable<int> history_node, Nullable<int> history_parent, ObjectParameter id_newnode, Nullable<int> transFlag)
        {
            var id_nodeParameter = id_node.HasValue ?
                new ObjectParameter("id_node", id_node) :
                new ObjectParameter("id_node", typeof(int));
    
            var id_parentParameter = id_parent.HasValue ?
                new ObjectParameter("id_parent", id_parent) :
                new ObjectParameter("id_parent", typeof(int));
    
            var id_itemtypeParameter = id_itemtype.HasValue ?
                new ObjectParameter("id_itemtype", id_itemtype) :
                new ObjectParameter("id_itemtype", typeof(int));
    
            var n_orderParameter = n_order.HasValue ?
                new ObjectParameter("n_order", n_order) :
                new ObjectParameter("n_order", typeof(int));
    
            var n_modeParameter = n_mode.HasValue ?
                new ObjectParameter("n_mode", n_mode) :
                new ObjectParameter("n_mode", typeof(int));
    
            var date_lastParameter = date_last.HasValue ?
                new ObjectParameter("date_last", date_last) :
                new ObjectParameter("date_last", typeof(System.DateTime));
    
            var date_createParameter = date_create.HasValue ?
                new ObjectParameter("date_create", date_create) :
                new ObjectParameter("date_create", typeof(System.DateTime));
    
            var id_userParameter = id_user.HasValue ?
                new ObjectParameter("id_user", id_user) :
                new ObjectParameter("id_user", typeof(int));
    
            var history_nodeParameter = history_node.HasValue ?
                new ObjectParameter("history_node", history_node) :
                new ObjectParameter("history_node", typeof(int));
    
            var history_parentParameter = history_parent.HasValue ?
                new ObjectParameter("history_parent", history_parent) :
                new ObjectParameter("history_parent", typeof(int));
    
            var transFlagParameter = transFlag.HasValue ?
                new ObjectParameter("TransFlag", transFlag) :
                new ObjectParameter("TransFlag", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertNode2", id_nodeParameter, id_parentParameter, id_itemtypeParameter, n_orderParameter, n_modeParameter, str_label, date_lastParameter, date_createParameter, id_userParameter, history_nodeParameter, history_parentParameter, id_newnode, transFlagParameter);
        }
    
        public virtual int InsertOrUpdateAttr(Nullable<int> id_attr, Nullable<int> id_type, string str_name, Nullable<int> attr_type, Nullable<int> transFlag)
        {
            var id_attrParameter = id_attr.HasValue ?
                new ObjectParameter("id_attr", id_attr) :
                new ObjectParameter("id_attr", typeof(int));
    
            var id_typeParameter = id_type.HasValue ?
                new ObjectParameter("id_type", id_type) :
                new ObjectParameter("id_type", typeof(int));
    
            var str_nameParameter = str_name != null ?
                new ObjectParameter("str_name", str_name) :
                new ObjectParameter("str_name", typeof(string));
    
            var attr_typeParameter = attr_type.HasValue ?
                new ObjectParameter("attr_type", attr_type) :
                new ObjectParameter("attr_type", typeof(int));
    
            var transFlagParameter = transFlag.HasValue ?
                new ObjectParameter("TransFlag", transFlag) :
                new ObjectParameter("TransFlag", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertOrUpdateAttr", id_attrParameter, id_typeParameter, str_nameParameter, attr_typeParameter, transFlagParameter);
        }
    
        public virtual int InsertOrUpdateEvent(Nullable<int> id_event, Nullable<int> event_type, Nullable<int> event_mode, Nullable<int> id_type, Nullable<int> id_attr, string str_class, string str_file, string str_function, Nullable<int> transFlag)
        {
            var id_eventParameter = id_event.HasValue ?
                new ObjectParameter("id_event", id_event) :
                new ObjectParameter("id_event", typeof(int));
    
            var event_typeParameter = event_type.HasValue ?
                new ObjectParameter("event_type", event_type) :
                new ObjectParameter("event_type", typeof(int));
    
            var event_modeParameter = event_mode.HasValue ?
                new ObjectParameter("event_mode", event_mode) :
                new ObjectParameter("event_mode", typeof(int));
    
            var id_typeParameter = id_type.HasValue ?
                new ObjectParameter("id_type", id_type) :
                new ObjectParameter("id_type", typeof(int));
    
            var id_attrParameter = id_attr.HasValue ?
                new ObjectParameter("id_attr", id_attr) :
                new ObjectParameter("id_attr", typeof(int));
    
            var str_classParameter = str_class != null ?
                new ObjectParameter("str_class", str_class) :
                new ObjectParameter("str_class", typeof(string));
    
            var str_fileParameter = str_file != null ?
                new ObjectParameter("str_file", str_file) :
                new ObjectParameter("str_file", typeof(string));
    
            var str_functionParameter = str_function != null ?
                new ObjectParameter("str_function", str_function) :
                new ObjectParameter("str_function", typeof(string));
    
            var transFlagParameter = transFlag.HasValue ?
                new ObjectParameter("TransFlag", transFlag) :
                new ObjectParameter("TransFlag", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertOrUpdateEvent", id_eventParameter, event_typeParameter, event_modeParameter, id_typeParameter, id_attrParameter, str_classParameter, str_fileParameter, str_functionParameter, transFlagParameter);
        }
    
        public virtual int InsertOrUpdateRefTree(Nullable<int> id_tree, string str_tree, Nullable<bool> b_table, Nullable<int> transFlag)
        {
            var id_treeParameter = id_tree.HasValue ?
                new ObjectParameter("id_tree", id_tree) :
                new ObjectParameter("id_tree", typeof(int));
    
            var str_treeParameter = str_tree != null ?
                new ObjectParameter("str_tree", str_tree) :
                new ObjectParameter("str_tree", typeof(string));
    
            var b_tableParameter = b_table.HasValue ?
                new ObjectParameter("b_table", b_table) :
                new ObjectParameter("b_table", typeof(bool));
    
            var transFlagParameter = transFlag.HasValue ?
                new ObjectParameter("TransFlag", transFlag) :
                new ObjectParameter("TransFlag", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertOrUpdateRefTree", id_treeParameter, str_treeParameter, b_tableParameter, transFlagParameter);
        }
    
        public virtual int InsertOrUpdateRelation(Nullable<int> id_itemtype1, Nullable<int> id_itemtype2, Nullable<bool> mask, Nullable<int> transFlag)
        {
            var id_itemtype1Parameter = id_itemtype1.HasValue ?
                new ObjectParameter("id_itemtype1", id_itemtype1) :
                new ObjectParameter("id_itemtype1", typeof(int));
    
            var id_itemtype2Parameter = id_itemtype2.HasValue ?
                new ObjectParameter("id_itemtype2", id_itemtype2) :
                new ObjectParameter("id_itemtype2", typeof(int));
    
            var maskParameter = mask.HasValue ?
                new ObjectParameter("mask", mask) :
                new ObjectParameter("mask", typeof(bool));
    
            var transFlagParameter = transFlag.HasValue ?
                new ObjectParameter("TransFlag", transFlag) :
                new ObjectParameter("TransFlag", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertOrUpdateRelation", id_itemtype1Parameter, id_itemtype2Parameter, maskParameter, transFlagParameter);
        }
    
        public virtual int InsertOrUpdateRole(Nullable<int> id_role, string str_name, string txt_description, Nullable<int> transFlag)
        {
            var id_roleParameter = id_role.HasValue ?
                new ObjectParameter("id_role", id_role) :
                new ObjectParameter("id_role", typeof(int));
    
            var str_nameParameter = str_name != null ?
                new ObjectParameter("str_name", str_name) :
                new ObjectParameter("str_name", typeof(string));
    
            var txt_descriptionParameter = txt_description != null ?
                new ObjectParameter("txt_description", txt_description) :
                new ObjectParameter("txt_description", typeof(string));
    
            var transFlagParameter = transFlag.HasValue ?
                new ObjectParameter("TransFlag", transFlag) :
                new ObjectParameter("TransFlag", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertOrUpdateRole", id_roleParameter, str_nameParameter, txt_descriptionParameter, transFlagParameter);
        }
    
        public virtual int InsertOrUpdateTree(Nullable<int> id_tree, string str_tree, Nullable<int> id_type, Nullable<int> transFlag)
        {
            var id_treeParameter = id_tree.HasValue ?
                new ObjectParameter("id_tree", id_tree) :
                new ObjectParameter("id_tree", typeof(int));
    
            var str_treeParameter = str_tree != null ?
                new ObjectParameter("str_tree", str_tree) :
                new ObjectParameter("str_tree", typeof(string));
    
            var id_typeParameter = id_type.HasValue ?
                new ObjectParameter("id_type", id_type) :
                new ObjectParameter("id_type", typeof(int));
    
            var transFlagParameter = transFlag.HasValue ?
                new ObjectParameter("TransFlag", transFlag) :
                new ObjectParameter("TransFlag", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertOrUpdateTree", id_treeParameter, str_treeParameter, id_typeParameter, transFlagParameter);
        }
    
        public virtual int InsertOrUpdateType(Nullable<int> id_type, string str_name, Nullable<int> file_type, Nullable<int> transFlag)
        {
            var id_typeParameter = id_type.HasValue ?
                new ObjectParameter("id_type", id_type) :
                new ObjectParameter("id_type", typeof(int));
    
            var str_nameParameter = str_name != null ?
                new ObjectParameter("str_name", str_name) :
                new ObjectParameter("str_name", typeof(string));
    
            var file_typeParameter = file_type.HasValue ?
                new ObjectParameter("file_type", file_type) :
                new ObjectParameter("file_type", typeof(int));
    
            var transFlagParameter = transFlag.HasValue ?
                new ObjectParameter("TransFlag", transFlag) :
                new ObjectParameter("TransFlag", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertOrUpdateType", id_typeParameter, str_nameParameter, file_typeParameter, transFlagParameter);
        }
    
        public virtual int InsertQuery(Nullable<int> id_query, Nullable<int> id_user, string text_query, string sql_query, string str_name, Nullable<int> id_type)
        {
            var id_queryParameter = id_query.HasValue ?
                new ObjectParameter("id_query", id_query) :
                new ObjectParameter("id_query", typeof(int));
    
            var id_userParameter = id_user.HasValue ?
                new ObjectParameter("id_user", id_user) :
                new ObjectParameter("id_user", typeof(int));
    
            var text_queryParameter = text_query != null ?
                new ObjectParameter("text_query", text_query) :
                new ObjectParameter("text_query", typeof(string));
    
            var sql_queryParameter = sql_query != null ?
                new ObjectParameter("sql_query", sql_query) :
                new ObjectParameter("sql_query", typeof(string));
    
            var str_nameParameter = str_name != null ?
                new ObjectParameter("str_name", str_name) :
                new ObjectParameter("str_name", typeof(string));
    
            var id_typeParameter = id_type.HasValue ?
                new ObjectParameter("id_type", id_type) :
                new ObjectParameter("id_type", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertQuery", id_queryParameter, id_userParameter, text_queryParameter, sql_queryParameter, str_nameParameter, id_typeParameter);
        }
    
        public virtual int InsertReport(Nullable<int> id_node, Nullable<int> id_itemtype, string str_label, Nullable<int> n_order, Nullable<int> transFlag)
        {
            var id_nodeParameter = id_node.HasValue ?
                new ObjectParameter("id_node", id_node) :
                new ObjectParameter("id_node", typeof(int));
    
            var id_itemtypeParameter = id_itemtype.HasValue ?
                new ObjectParameter("id_itemtype", id_itemtype) :
                new ObjectParameter("id_itemtype", typeof(int));
    
            var str_labelParameter = str_label != null ?
                new ObjectParameter("str_label", str_label) :
                new ObjectParameter("str_label", typeof(string));
    
            var n_orderParameter = n_order.HasValue ?
                new ObjectParameter("n_order", n_order) :
                new ObjectParameter("n_order", typeof(int));
    
            var transFlagParameter = transFlag.HasValue ?
                new ObjectParameter("TransFlag", transFlag) :
                new ObjectParameter("TransFlag", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertReport", id_nodeParameter, id_itemtypeParameter, str_labelParameter, n_orderParameter, transFlagParameter);
        }
    
        public virtual int InsertReportWord(Nullable<int> id_node, Nullable<int> id_itemtype, string str_label, Nullable<int> n_order, Nullable<int> transFlag)
        {
            var id_nodeParameter = id_node.HasValue ?
                new ObjectParameter("id_node", id_node) :
                new ObjectParameter("id_node", typeof(int));
    
            var id_itemtypeParameter = id_itemtype.HasValue ?
                new ObjectParameter("id_itemtype", id_itemtype) :
                new ObjectParameter("id_itemtype", typeof(int));
    
            var str_labelParameter = str_label != null ?
                new ObjectParameter("str_label", str_label) :
                new ObjectParameter("str_label", typeof(string));
    
            var n_orderParameter = n_order.HasValue ?
                new ObjectParameter("n_order", n_order) :
                new ObjectParameter("n_order", typeof(int));
    
            var transFlagParameter = transFlag.HasValue ?
                new ObjectParameter("TransFlag", transFlag) :
                new ObjectParameter("TransFlag", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertReportWord", id_nodeParameter, id_itemtypeParameter, str_labelParameter, n_orderParameter, transFlagParameter);
        }
    
        public virtual int InsertSearchAttr(Nullable<int> id_attr, Nullable<int> id_parent, Nullable<int> n_order, Nullable<int> transFlag)
        {
            var id_attrParameter = id_attr.HasValue ?
                new ObjectParameter("id_attr", id_attr) :
                new ObjectParameter("id_attr", typeof(int));
    
            var id_parentParameter = id_parent.HasValue ?
                new ObjectParameter("id_parent", id_parent) :
                new ObjectParameter("id_parent", typeof(int));
    
            var n_orderParameter = n_order.HasValue ?
                new ObjectParameter("n_order", n_order) :
                new ObjectParameter("n_order", typeof(int));
    
            var transFlagParameter = transFlag.HasValue ?
                new ObjectParameter("TransFlag", transFlag) :
                new ObjectParameter("TransFlag", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertSearchAttr", id_attrParameter, id_parentParameter, n_orderParameter, transFlagParameter);
        }
    
        public virtual int InsertSearchResAttr(Nullable<int> id_attr, Nullable<int> n_order, Nullable<int> int_width, Nullable<int> id_type, Nullable<int> transFlag)
        {
            var id_attrParameter = id_attr.HasValue ?
                new ObjectParameter("id_attr", id_attr) :
                new ObjectParameter("id_attr", typeof(int));
    
            var n_orderParameter = n_order.HasValue ?
                new ObjectParameter("n_order", n_order) :
                new ObjectParameter("n_order", typeof(int));
    
            var int_widthParameter = int_width.HasValue ?
                new ObjectParameter("int_width", int_width) :
                new ObjectParameter("int_width", typeof(int));
    
            var id_typeParameter = id_type.HasValue ?
                new ObjectParameter("id_type", id_type) :
                new ObjectParameter("id_type", typeof(int));
    
            var transFlagParameter = transFlag.HasValue ?
                new ObjectParameter("TransFlag", transFlag) :
                new ObjectParameter("TransFlag", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertSearchResAttr", id_attrParameter, n_orderParameter, int_widthParameter, id_typeParameter, transFlagParameter);
        }
    
        public virtual int InsertTableAttr(Nullable<int> id_attr, Nullable<int> id_col, string str_name, Nullable<int> coltype, Nullable<int> int_width, Nullable<int> int_from, Nullable<int> int_to, string str_formul, Nullable<int> transFlag)
        {
            var id_attrParameter = id_attr.HasValue ?
                new ObjectParameter("id_attr", id_attr) :
                new ObjectParameter("id_attr", typeof(int));
    
            var id_colParameter = id_col.HasValue ?
                new ObjectParameter("id_col", id_col) :
                new ObjectParameter("id_col", typeof(int));
    
            var str_nameParameter = str_name != null ?
                new ObjectParameter("str_name", str_name) :
                new ObjectParameter("str_name", typeof(string));
    
            var coltypeParameter = coltype.HasValue ?
                new ObjectParameter("coltype", coltype) :
                new ObjectParameter("coltype", typeof(int));
    
            var int_widthParameter = int_width.HasValue ?
                new ObjectParameter("int_width", int_width) :
                new ObjectParameter("int_width", typeof(int));
    
            var int_fromParameter = int_from.HasValue ?
                new ObjectParameter("int_from", int_from) :
                new ObjectParameter("int_from", typeof(int));
    
            var int_toParameter = int_to.HasValue ?
                new ObjectParameter("int_to", int_to) :
                new ObjectParameter("int_to", typeof(int));
    
            var str_formulParameter = str_formul != null ?
                new ObjectParameter("str_formul", str_formul) :
                new ObjectParameter("str_formul", typeof(string));
    
            var transFlagParameter = transFlag.HasValue ?
                new ObjectParameter("TransFlag", transFlag) :
                new ObjectParameter("TransFlag", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertTableAttr", id_attrParameter, id_colParameter, str_nameParameter, coltypeParameter, int_widthParameter, int_fromParameter, int_toParameter, str_formulParameter, transFlagParameter);
        }
    
        public virtual int InsertTableListAttr(Nullable<int> id_attr, Nullable<int> id_col, string str_name, Nullable<int> transFlag)
        {
            var id_attrParameter = id_attr.HasValue ?
                new ObjectParameter("id_attr", id_attr) :
                new ObjectParameter("id_attr", typeof(int));
    
            var id_colParameter = id_col.HasValue ?
                new ObjectParameter("id_col", id_col) :
                new ObjectParameter("id_col", typeof(int));
    
            var str_nameParameter = str_name != null ?
                new ObjectParameter("str_name", str_name) :
                new ObjectParameter("str_name", typeof(string));
    
            var transFlagParameter = transFlag.HasValue ?
                new ObjectParameter("TransFlag", transFlag) :
                new ObjectParameter("TransFlag", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertTableListAttr", id_attrParameter, id_colParameter, str_nameParameter, transFlagParameter);
        }
    
        public virtual int InsertTypeAttrFolder(Nullable<int> id_type, Nullable<int> id_parent, Nullable<int> n_order, Nullable<bool> is_folder, Nullable<int> id_attr, string str_label, Nullable<int> transFlag)
        {
            var id_typeParameter = id_type.HasValue ?
                new ObjectParameter("id_type", id_type) :
                new ObjectParameter("id_type", typeof(int));
    
            var id_parentParameter = id_parent.HasValue ?
                new ObjectParameter("id_parent", id_parent) :
                new ObjectParameter("id_parent", typeof(int));
    
            var n_orderParameter = n_order.HasValue ?
                new ObjectParameter("n_order", n_order) :
                new ObjectParameter("n_order", typeof(int));
    
            var is_folderParameter = is_folder.HasValue ?
                new ObjectParameter("is_folder", is_folder) :
                new ObjectParameter("is_folder", typeof(bool));
    
            var id_attrParameter = id_attr.HasValue ?
                new ObjectParameter("id_attr", id_attr) :
                new ObjectParameter("id_attr", typeof(int));
    
            var str_labelParameter = str_label != null ?
                new ObjectParameter("str_label", str_label) :
                new ObjectParameter("str_label", typeof(string));
    
            var transFlagParameter = transFlag.HasValue ?
                new ObjectParameter("TransFlag", transFlag) :
                new ObjectParameter("TransFlag", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertTypeAttrFolder", id_typeParameter, id_parentParameter, n_orderParameter, is_folderParameter, id_attrParameter, str_labelParameter, transFlagParameter);
        }
    
        public virtual int InsertUser(Nullable<int> id_user, string login, byte[] bin_password, string description, string full_name, Nullable<int> b_disabled)
        {
            var id_userParameter = id_user.HasValue ?
                new ObjectParameter("id_user", id_user) :
                new ObjectParameter("id_user", typeof(int));
    
            var loginParameter = login != null ?
                new ObjectParameter("login", login) :
                new ObjectParameter("login", typeof(string));
    
            var bin_passwordParameter = bin_password != null ?
                new ObjectParameter("bin_password", bin_password) :
                new ObjectParameter("bin_password", typeof(byte[]));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var full_nameParameter = full_name != null ?
                new ObjectParameter("full_name", full_name) :
                new ObjectParameter("full_name", typeof(string));
    
            var b_disabledParameter = b_disabled.HasValue ?
                new ObjectParameter("b_disabled", b_disabled) :
                new ObjectParameter("b_disabled", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUser", id_userParameter, loginParameter, bin_passwordParameter, descriptionParameter, full_nameParameter, b_disabledParameter);
        }
    
        public virtual int IsAncestor(Nullable<int> id_node, Nullable<int> id_ancestor)
        {
            var id_nodeParameter = id_node.HasValue ?
                new ObjectParameter("id_node", id_node) :
                new ObjectParameter("id_node", typeof(int));
    
            var id_ancestorParameter = id_ancestor.HasValue ?
                new ObjectParameter("id_ancestor", id_ancestor) :
                new ObjectParameter("id_ancestor", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("IsAncestor", id_nodeParameter, id_ancestorParameter);
        }
    
        public virtual int IsArchiveUser(string str_login, byte[] bin_password)
        {
            var str_loginParameter = str_login != null ?
                new ObjectParameter("str_login", str_login) :
                new ObjectParameter("str_login", typeof(string));
    
            var bin_passwordParameter = bin_password != null ?
                new ObjectParameter("bin_password", bin_password) :
                new ObjectParameter("bin_password", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("IsArchiveUser", str_loginParameter, bin_passwordParameter);
        }
    
        public virtual int IsDefaultAttr(Nullable<int> id_checkattr)
        {
            var id_checkattrParameter = id_checkattr.HasValue ?
                new ObjectParameter("id_checkattr", id_checkattr) :
                new ObjectParameter("id_checkattr", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("IsDefaultAttr", id_checkattrParameter);
        }
    
        public virtual int IsNodeParentPerm(Nullable<int> id_node, Nullable<int> id_group, Nullable<int> perm)
        {
            var id_nodeParameter = id_node.HasValue ?
                new ObjectParameter("id_node", id_node) :
                new ObjectParameter("id_node", typeof(int));
    
            var id_groupParameter = id_group.HasValue ?
                new ObjectParameter("id_group", id_group) :
                new ObjectParameter("id_group", typeof(int));
    
            var permParameter = perm.HasValue ?
                new ObjectParameter("perm", perm) :
                new ObjectParameter("perm", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("IsNodeParentPerm", id_nodeParameter, id_groupParameter, permParameter);
        }
    
        public virtual int IsStorageInfoDefault(Nullable<int> id_node, ObjectParameter id_parent, ObjectParameter storageinfo_id, ObjectParameter parent_storageinfo_id)
        {
            var id_nodeParameter = id_node.HasValue ?
                new ObjectParameter("id_node", id_node) :
                new ObjectParameter("id_node", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("IsStorageInfoDefault", id_nodeParameter, id_parent, storageinfo_id, parent_storageinfo_id);
        }
    
        public virtual ObjectResult<MESENGER_Result> MESENGER(string uSER)
        {
            var uSERParameter = uSER != null ?
                new ObjectParameter("USER", uSER) :
                new ObjectParameter("USER", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MESENGER_Result>("MESENGER", uSERParameter);
        }
    
        public virtual int MoveDictValue(Nullable<int> id_attr, Nullable<int> id_col, Nullable<int> id_node, Nullable<int> new_parent, Nullable<int> transFlag)
        {
            var id_attrParameter = id_attr.HasValue ?
                new ObjectParameter("id_attr", id_attr) :
                new ObjectParameter("id_attr", typeof(int));
    
            var id_colParameter = id_col.HasValue ?
                new ObjectParameter("id_col", id_col) :
                new ObjectParameter("id_col", typeof(int));
    
            var id_nodeParameter = id_node.HasValue ?
                new ObjectParameter("id_node", id_node) :
                new ObjectParameter("id_node", typeof(int));
    
            var new_parentParameter = new_parent.HasValue ?
                new ObjectParameter("new_parent", new_parent) :
                new ObjectParameter("new_parent", typeof(int));
    
            var transFlagParameter = transFlag.HasValue ?
                new ObjectParameter("TransFlag", transFlag) :
                new ObjectParameter("TransFlag", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MoveDictValue", id_attrParameter, id_colParameter, id_nodeParameter, new_parentParameter, transFlagParameter);
        }
    
        public virtual int MoveNode(Nullable<int> id_node, Nullable<int> new_parent, Nullable<bool> moveToTrash, Nullable<int> history_node1, Nullable<int> history_node2, Nullable<int> history_node3, Nullable<int> history_parent1, Nullable<int> history_parent2, Nullable<int> transFlag)
        {
            var id_nodeParameter = id_node.HasValue ?
                new ObjectParameter("id_node", id_node) :
                new ObjectParameter("id_node", typeof(int));
    
            var new_parentParameter = new_parent.HasValue ?
                new ObjectParameter("new_parent", new_parent) :
                new ObjectParameter("new_parent", typeof(int));
    
            var moveToTrashParameter = moveToTrash.HasValue ?
                new ObjectParameter("MoveToTrash", moveToTrash) :
                new ObjectParameter("MoveToTrash", typeof(bool));
    
            var history_node1Parameter = history_node1.HasValue ?
                new ObjectParameter("history_node1", history_node1) :
                new ObjectParameter("history_node1", typeof(int));
    
            var history_node2Parameter = history_node2.HasValue ?
                new ObjectParameter("history_node2", history_node2) :
                new ObjectParameter("history_node2", typeof(int));
    
            var history_node3Parameter = history_node3.HasValue ?
                new ObjectParameter("history_node3", history_node3) :
                new ObjectParameter("history_node3", typeof(int));
    
            var history_parent1Parameter = history_parent1.HasValue ?
                new ObjectParameter("history_parent1", history_parent1) :
                new ObjectParameter("history_parent1", typeof(int));
    
            var history_parent2Parameter = history_parent2.HasValue ?
                new ObjectParameter("history_parent2", history_parent2) :
                new ObjectParameter("history_parent2", typeof(int));
    
            var transFlagParameter = transFlag.HasValue ?
                new ObjectParameter("TransFlag", transFlag) :
                new ObjectParameter("TransFlag", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MoveNode", id_nodeParameter, new_parentParameter, moveToTrashParameter, history_node1Parameter, history_node2Parameter, history_node3Parameter, history_parent1Parameter, history_parent2Parameter, transFlagParameter);
        }
    
        public virtual int prepareDefaultValues(Nullable<int> idNode, string linkedNodesTable, string linkedAttribsTable)
        {
            var idNodeParameter = idNode.HasValue ?
                new ObjectParameter("idNode", idNode) :
                new ObjectParameter("idNode", typeof(int));
    
            var linkedNodesTableParameter = linkedNodesTable != null ?
                new ObjectParameter("linkedNodesTable", linkedNodesTable) :
                new ObjectParameter("linkedNodesTable", typeof(string));
    
            var linkedAttribsTableParameter = linkedAttribsTable != null ?
                new ObjectParameter("linkedAttribsTable", linkedAttribsTable) :
                new ObjectParameter("linkedAttribsTable", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("prepareDefaultValues", idNodeParameter, linkedNodesTableParameter, linkedAttribsTableParameter);
        }
    
        public virtual int RenameDefaultNode(Nullable<int> id_node, string str_label, Nullable<int> transFlag)
        {
            var id_nodeParameter = id_node.HasValue ?
                new ObjectParameter("id_node", id_node) :
                new ObjectParameter("id_node", typeof(int));
    
            var str_labelParameter = str_label != null ?
                new ObjectParameter("str_label", str_label) :
                new ObjectParameter("str_label", typeof(string));
    
            var transFlagParameter = transFlag.HasValue ?
                new ObjectParameter("TransFlag", transFlag) :
                new ObjectParameter("TransFlag", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RenameDefaultNode", id_nodeParameter, str_labelParameter, transFlagParameter);
        }
    
        public virtual int RenameDictValue(Nullable<int> id_attr, string str_name, string str_label, Nullable<int> id_col, Nullable<double> mult, Nullable<int> id_node, Nullable<int> transFlag)
        {
            var id_attrParameter = id_attr.HasValue ?
                new ObjectParameter("id_attr", id_attr) :
                new ObjectParameter("id_attr", typeof(int));
    
            var str_nameParameter = str_name != null ?
                new ObjectParameter("str_name", str_name) :
                new ObjectParameter("str_name", typeof(string));
    
            var str_labelParameter = str_label != null ?
                new ObjectParameter("str_label", str_label) :
                new ObjectParameter("str_label", typeof(string));
    
            var id_colParameter = id_col.HasValue ?
                new ObjectParameter("id_col", id_col) :
                new ObjectParameter("id_col", typeof(int));
    
            var multParameter = mult.HasValue ?
                new ObjectParameter("mult", mult) :
                new ObjectParameter("mult", typeof(double));
    
            var id_nodeParameter = id_node.HasValue ?
                new ObjectParameter("id_node", id_node) :
                new ObjectParameter("id_node", typeof(int));
    
            var transFlagParameter = transFlag.HasValue ?
                new ObjectParameter("TransFlag", transFlag) :
                new ObjectParameter("TransFlag", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RenameDictValue", id_attrParameter, str_nameParameter, str_labelParameter, id_colParameter, multParameter, id_nodeParameter, transFlagParameter);
        }
    
        public virtual int RenameNode(Nullable<int> id_node, string str_label, Nullable<int> transFlag)
        {
            var id_nodeParameter = id_node.HasValue ?
                new ObjectParameter("id_node", id_node) :
                new ObjectParameter("id_node", typeof(int));
    
            var str_labelParameter = str_label != null ?
                new ObjectParameter("str_label", str_label) :
                new ObjectParameter("str_label", typeof(string));
    
            var transFlagParameter = transFlag.HasValue ?
                new ObjectParameter("TransFlag", transFlag) :
                new ObjectParameter("TransFlag", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RenameNode", id_nodeParameter, str_labelParameter, transFlagParameter);
        }
    
        public virtual int RenameReport(Nullable<int> id_report, string str_label, Nullable<int> transFlag)
        {
            var id_reportParameter = id_report.HasValue ?
                new ObjectParameter("id_report", id_report) :
                new ObjectParameter("id_report", typeof(int));
    
            var str_labelParameter = str_label != null ?
                new ObjectParameter("str_label", str_label) :
                new ObjectParameter("str_label", typeof(string));
    
            var transFlagParameter = transFlag.HasValue ?
                new ObjectParameter("TransFlag", transFlag) :
                new ObjectParameter("TransFlag", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RenameReport", id_reportParameter, str_labelParameter, transFlagParameter);
        }
    
        public virtual int RenameType(Nullable<int> id_type, string str_name, Nullable<int> transFlag)
        {
            var id_typeParameter = id_type.HasValue ?
                new ObjectParameter("id_type", id_type) :
                new ObjectParameter("id_type", typeof(int));
    
            var str_nameParameter = str_name != null ?
                new ObjectParameter("str_name", str_name) :
                new ObjectParameter("str_name", typeof(string));
    
            var transFlagParameter = transFlag.HasValue ?
                new ObjectParameter("TransFlag", transFlag) :
                new ObjectParameter("TransFlag", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RenameType", id_typeParameter, str_nameParameter, transFlagParameter);
        }
    
        public virtual int SetAipConfValue(Nullable<int> id, string val)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var valParameter = val != null ?
                new ObjectParameter("val", val) :
                new ObjectParameter("val", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SetAipConfValue", idParameter, valParameter);
        }
    
        public virtual int SetCatalogRule(Nullable<int> id_type, Nullable<int> n_order, Nullable<int> folder_type, string folder_name, Nullable<bool> is_alf, Nullable<int> transFlag)
        {
            var id_typeParameter = id_type.HasValue ?
                new ObjectParameter("id_type", id_type) :
                new ObjectParameter("id_type", typeof(int));
    
            var n_orderParameter = n_order.HasValue ?
                new ObjectParameter("n_order", n_order) :
                new ObjectParameter("n_order", typeof(int));
    
            var folder_typeParameter = folder_type.HasValue ?
                new ObjectParameter("folder_type", folder_type) :
                new ObjectParameter("folder_type", typeof(int));
    
            var folder_nameParameter = folder_name != null ?
                new ObjectParameter("folder_name", folder_name) :
                new ObjectParameter("folder_name", typeof(string));
    
            var is_alfParameter = is_alf.HasValue ?
                new ObjectParameter("is_alf", is_alf) :
                new ObjectParameter("is_alf", typeof(bool));
    
            var transFlagParameter = transFlag.HasValue ?
                new ObjectParameter("TransFlag", transFlag) :
                new ObjectParameter("TransFlag", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SetCatalogRule", id_typeParameter, n_orderParameter, folder_typeParameter, folder_nameParameter, is_alfParameter, transFlagParameter);
        }
    
        public virtual int SetCatalogType(Nullable<int> id_type, string label_name, Nullable<int> catalog_type, Nullable<int> transFlag)
        {
            var id_typeParameter = id_type.HasValue ?
                new ObjectParameter("id_type", id_type) :
                new ObjectParameter("id_type", typeof(int));
    
            var label_nameParameter = label_name != null ?
                new ObjectParameter("label_name", label_name) :
                new ObjectParameter("label_name", typeof(string));
    
            var catalog_typeParameter = catalog_type.HasValue ?
                new ObjectParameter("catalog_type", catalog_type) :
                new ObjectParameter("catalog_type", typeof(int));
    
            var transFlagParameter = transFlag.HasValue ?
                new ObjectParameter("TransFlag", transFlag) :
                new ObjectParameter("TransFlag", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SetCatalogType", id_typeParameter, label_nameParameter, catalog_typeParameter, transFlagParameter);
        }
    
        public virtual int SetDefaultAttr(Nullable<int> id_node, Nullable<int> id_attr)
        {
            var id_nodeParameter = id_node.HasValue ?
                new ObjectParameter("id_node", id_node) :
                new ObjectParameter("id_node", typeof(int));
    
            var id_attrParameter = id_attr.HasValue ?
                new ObjectParameter("id_attr", id_attr) :
                new ObjectParameter("id_attr", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SetDefaultAttr", id_nodeParameter, id_attrParameter);
        }
    
        public virtual int SetDefaultValue(Nullable<int> id_node, Nullable<int> id_attr, Nullable<int> is_def)
        {
            var id_nodeParameter = id_node.HasValue ?
                new ObjectParameter("id_node", id_node) :
                new ObjectParameter("id_node", typeof(int));
    
            var id_attrParameter = id_attr.HasValue ?
                new ObjectParameter("id_attr", id_attr) :
                new ObjectParameter("id_attr", typeof(int));
    
            var is_defParameter = is_def.HasValue ?
                new ObjectParameter("is_def", is_def) :
                new ObjectParameter("is_def", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SetDefaultValue", id_nodeParameter, id_attrParameter, is_defParameter);
        }
    
        public virtual int SetOptions(Nullable<int> id, byte[] b_option, Nullable<int> int_val1, Nullable<int> int_val2, Nullable<int> int_val3)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var b_optionParameter = b_option != null ?
                new ObjectParameter("b_option", b_option) :
                new ObjectParameter("b_option", typeof(byte[]));
    
            var int_val1Parameter = int_val1.HasValue ?
                new ObjectParameter("int_val1", int_val1) :
                new ObjectParameter("int_val1", typeof(int));
    
            var int_val2Parameter = int_val2.HasValue ?
                new ObjectParameter("int_val2", int_val2) :
                new ObjectParameter("int_val2", typeof(int));
    
            var int_val3Parameter = int_val3.HasValue ?
                new ObjectParameter("int_val3", int_val3) :
                new ObjectParameter("int_val3", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SetOptions", idParameter, b_optionParameter, int_val1Parameter, int_val2Parameter, int_val3Parameter);
        }
    
        public virtual int SetRightsRecursive(Nullable<int> id_node, Nullable<int> id_group, Nullable<int> perm, Nullable<int> perm_one, Nullable<int> perm_one_bit)
        {
            var id_nodeParameter = id_node.HasValue ?
                new ObjectParameter("id_node", id_node) :
                new ObjectParameter("id_node", typeof(int));
    
            var id_groupParameter = id_group.HasValue ?
                new ObjectParameter("id_group", id_group) :
                new ObjectParameter("id_group", typeof(int));
    
            var permParameter = perm.HasValue ?
                new ObjectParameter("perm", perm) :
                new ObjectParameter("perm", typeof(int));
    
            var perm_oneParameter = perm_one.HasValue ?
                new ObjectParameter("perm_one", perm_one) :
                new ObjectParameter("perm_one", typeof(int));
    
            var perm_one_bitParameter = perm_one_bit.HasValue ?
                new ObjectParameter("perm_one_bit", perm_one_bit) :
                new ObjectParameter("perm_one_bit", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SetRightsRecursive", id_nodeParameter, id_groupParameter, permParameter, perm_oneParameter, perm_one_bitParameter);
        }
    
        public virtual int SetUserConfig(Nullable<int> id_user, Nullable<int> id_node, Nullable<bool> b_tree, Nullable<bool> b_searchpanel, Nullable<bool> b_navpanel, Nullable<bool> b_list, Nullable<int> transFlag)
        {
            var id_userParameter = id_user.HasValue ?
                new ObjectParameter("id_user", id_user) :
                new ObjectParameter("id_user", typeof(int));
    
            var id_nodeParameter = id_node.HasValue ?
                new ObjectParameter("id_node", id_node) :
                new ObjectParameter("id_node", typeof(int));
    
            var b_treeParameter = b_tree.HasValue ?
                new ObjectParameter("b_tree", b_tree) :
                new ObjectParameter("b_tree", typeof(bool));
    
            var b_searchpanelParameter = b_searchpanel.HasValue ?
                new ObjectParameter("b_searchpanel", b_searchpanel) :
                new ObjectParameter("b_searchpanel", typeof(bool));
    
            var b_navpanelParameter = b_navpanel.HasValue ?
                new ObjectParameter("b_navpanel", b_navpanel) :
                new ObjectParameter("b_navpanel", typeof(bool));
    
            var b_listParameter = b_list.HasValue ?
                new ObjectParameter("b_list", b_list) :
                new ObjectParameter("b_list", typeof(bool));
    
            var transFlagParameter = transFlag.HasValue ?
                new ObjectParameter("TransFlag", transFlag) :
                new ObjectParameter("TransFlag", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SetUserConfig", id_userParameter, id_nodeParameter, b_treeParameter, b_searchpanelParameter, b_navpanelParameter, b_listParameter, transFlagParameter);
        }
    
        public virtual int SetVirtualFunction(Nullable<int> id_attr, Nullable<int> id_funattr, Nullable<int> id_col, string str_concat, Nullable<int> id_fun, Nullable<int> id_type, Nullable<int> transFlag)
        {
            var id_attrParameter = id_attr.HasValue ?
                new ObjectParameter("id_attr", id_attr) :
                new ObjectParameter("id_attr", typeof(int));
    
            var id_funattrParameter = id_funattr.HasValue ?
                new ObjectParameter("id_funattr", id_funattr) :
                new ObjectParameter("id_funattr", typeof(int));
    
            var id_colParameter = id_col.HasValue ?
                new ObjectParameter("id_col", id_col) :
                new ObjectParameter("id_col", typeof(int));
    
            var str_concatParameter = str_concat != null ?
                new ObjectParameter("str_concat", str_concat) :
                new ObjectParameter("str_concat", typeof(string));
    
            var id_funParameter = id_fun.HasValue ?
                new ObjectParameter("id_fun", id_fun) :
                new ObjectParameter("id_fun", typeof(int));
    
            var id_typeParameter = id_type.HasValue ?
                new ObjectParameter("id_type", id_type) :
                new ObjectParameter("id_type", typeof(int));
    
            var transFlagParameter = transFlag.HasValue ?
                new ObjectParameter("TransFlag", transFlag) :
                new ObjectParameter("TransFlag", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SetVirtualFunction", id_attrParameter, id_funattrParameter, id_colParameter, str_concatParameter, id_funParameter, id_typeParameter, transFlagParameter);
        }
    
        public virtual int UpdateCharAttr(Nullable<int> id_attr, Nullable<int> id_node, string char_val, Nullable<int> history_node, Nullable<int> transFlag)
        {
            var id_attrParameter = id_attr.HasValue ?
                new ObjectParameter("id_attr", id_attr) :
                new ObjectParameter("id_attr", typeof(int));
    
            var id_nodeParameter = id_node.HasValue ?
                new ObjectParameter("id_node", id_node) :
                new ObjectParameter("id_node", typeof(int));
    
            var char_valParameter = char_val != null ?
                new ObjectParameter("char_val", char_val) :
                new ObjectParameter("char_val", typeof(string));
    
            var history_nodeParameter = history_node.HasValue ?
                new ObjectParameter("history_node", history_node) :
                new ObjectParameter("history_node", typeof(int));
    
            var transFlagParameter = transFlag.HasValue ?
                new ObjectParameter("TransFlag", transFlag) :
                new ObjectParameter("TransFlag", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateCharAttr", id_attrParameter, id_nodeParameter, char_valParameter, history_nodeParameter, transFlagParameter);
        }
    
        public virtual int updateCustomFileAttrib(Nullable<int> file_iscustom, string file_title, string file_name, Nullable<int> file_type, Nullable<int> file_order, Nullable<int> file_node)
        {
            var file_iscustomParameter = file_iscustom.HasValue ?
                new ObjectParameter("file_iscustom", file_iscustom) :
                new ObjectParameter("file_iscustom", typeof(int));
    
            var file_titleParameter = file_title != null ?
                new ObjectParameter("file_title", file_title) :
                new ObjectParameter("file_title", typeof(string));
    
            var file_nameParameter = file_name != null ?
                new ObjectParameter("file_name", file_name) :
                new ObjectParameter("file_name", typeof(string));
    
            var file_typeParameter = file_type.HasValue ?
                new ObjectParameter("file_type", file_type) :
                new ObjectParameter("file_type", typeof(int));
    
            var file_orderParameter = file_order.HasValue ?
                new ObjectParameter("file_order", file_order) :
                new ObjectParameter("file_order", typeof(int));
    
            var file_nodeParameter = file_node.HasValue ?
                new ObjectParameter("file_node", file_node) :
                new ObjectParameter("file_node", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("updateCustomFileAttrib", file_iscustomParameter, file_titleParameter, file_nameParameter, file_typeParameter, file_orderParameter, file_nodeParameter);
        }
    
        public virtual int UpdateDateAttr(Nullable<int> id_attr, Nullable<int> id_node, Nullable<int> history_node, Nullable<System.DateTime> date_val, Nullable<int> transFlag)
        {
            var id_attrParameter = id_attr.HasValue ?
                new ObjectParameter("id_attr", id_attr) :
                new ObjectParameter("id_attr", typeof(int));
    
            var id_nodeParameter = id_node.HasValue ?
                new ObjectParameter("id_node", id_node) :
                new ObjectParameter("id_node", typeof(int));
    
            var history_nodeParameter = history_node.HasValue ?
                new ObjectParameter("history_node", history_node) :
                new ObjectParameter("history_node", typeof(int));
    
            var date_valParameter = date_val.HasValue ?
                new ObjectParameter("date_val", date_val) :
                new ObjectParameter("date_val", typeof(System.DateTime));
    
            var transFlagParameter = transFlag.HasValue ?
                new ObjectParameter("TransFlag", transFlag) :
                new ObjectParameter("TransFlag", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateDateAttr", id_attrParameter, id_nodeParameter, history_nodeParameter, date_valParameter, transFlagParameter);
        }
    
        public virtual int UpdateFloatAttr(Nullable<int> id_attr, Nullable<int> id_node, Nullable<int> history_node, Nullable<double> float_val, Nullable<int> transFlag)
        {
            var id_attrParameter = id_attr.HasValue ?
                new ObjectParameter("id_attr", id_attr) :
                new ObjectParameter("id_attr", typeof(int));
    
            var id_nodeParameter = id_node.HasValue ?
                new ObjectParameter("id_node", id_node) :
                new ObjectParameter("id_node", typeof(int));
    
            var history_nodeParameter = history_node.HasValue ?
                new ObjectParameter("history_node", history_node) :
                new ObjectParameter("history_node", typeof(int));
    
            var float_valParameter = float_val.HasValue ?
                new ObjectParameter("float_val", float_val) :
                new ObjectParameter("float_val", typeof(double));
    
            var transFlagParameter = transFlag.HasValue ?
                new ObjectParameter("TransFlag", transFlag) :
                new ObjectParameter("TransFlag", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateFloatAttr", id_attrParameter, id_nodeParameter, history_nodeParameter, float_valParameter, transFlagParameter);
        }
    
        public virtual int UpdateImageAttr(Nullable<int> id_attr, Nullable<int> id_node, Nullable<int> history_node, byte[] image_val, Nullable<int> transFlag)
        {
            var id_attrParameter = id_attr.HasValue ?
                new ObjectParameter("id_attr", id_attr) :
                new ObjectParameter("id_attr", typeof(int));
    
            var id_nodeParameter = id_node.HasValue ?
                new ObjectParameter("id_node", id_node) :
                new ObjectParameter("id_node", typeof(int));
    
            var history_nodeParameter = history_node.HasValue ?
                new ObjectParameter("history_node", history_node) :
                new ObjectParameter("history_node", typeof(int));
    
            var image_valParameter = image_val != null ?
                new ObjectParameter("image_val", image_val) :
                new ObjectParameter("image_val", typeof(byte[]));
    
            var transFlagParameter = transFlag.HasValue ?
                new ObjectParameter("TransFlag", transFlag) :
                new ObjectParameter("TransFlag", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateImageAttr", id_attrParameter, id_nodeParameter, history_nodeParameter, image_valParameter, transFlagParameter);
        }
    
        public virtual int UpdateIntAttr(Nullable<int> id_attr, Nullable<int> id_node, Nullable<int> history_node, Nullable<int> int_val, Nullable<int> transFlag)
        {
            var id_attrParameter = id_attr.HasValue ?
                new ObjectParameter("id_attr", id_attr) :
                new ObjectParameter("id_attr", typeof(int));
    
            var id_nodeParameter = id_node.HasValue ?
                new ObjectParameter("id_node", id_node) :
                new ObjectParameter("id_node", typeof(int));
    
            var history_nodeParameter = history_node.HasValue ?
                new ObjectParameter("history_node", history_node) :
                new ObjectParameter("history_node", typeof(int));
    
            var int_valParameter = int_val.HasValue ?
                new ObjectParameter("int_val", int_val) :
                new ObjectParameter("int_val", typeof(int));
    
            var transFlagParameter = transFlag.HasValue ?
                new ObjectParameter("TransFlag", transFlag) :
                new ObjectParameter("TransFlag", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateIntAttr", id_attrParameter, id_nodeParameter, history_nodeParameter, int_valParameter, transFlagParameter);
        }
    
        public virtual int UpdateIstecorotvetchik(Nullable<int> id_node1)
        {
            var id_node1Parameter = id_node1.HasValue ?
                new ObjectParameter("id_node1", id_node1) :
                new ObjectParameter("id_node1", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateIstecorotvetchik", id_node1Parameter);
        }
    
        public virtual int UpdateItemDoc(Nullable<int> id_node, string str_file, string str_image, Nullable<int> history_node, Nullable<int> n_order, Nullable<int> transFlag)
        {
            var id_nodeParameter = id_node.HasValue ?
                new ObjectParameter("id_node", id_node) :
                new ObjectParameter("id_node", typeof(int));
    
            var str_fileParameter = str_file != null ?
                new ObjectParameter("str_file", str_file) :
                new ObjectParameter("str_file", typeof(string));
    
            var str_imageParameter = str_image != null ?
                new ObjectParameter("str_image", str_image) :
                new ObjectParameter("str_image", typeof(string));
    
            var history_nodeParameter = history_node.HasValue ?
                new ObjectParameter("history_node", history_node) :
                new ObjectParameter("history_node", typeof(int));
    
            var n_orderParameter = n_order.HasValue ?
                new ObjectParameter("n_order", n_order) :
                new ObjectParameter("n_order", typeof(int));
    
            var transFlagParameter = transFlag.HasValue ?
                new ObjectParameter("TransFlag", transFlag) :
                new ObjectParameter("TransFlag", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateItemDoc", id_nodeParameter, str_fileParameter, str_imageParameter, history_nodeParameter, n_orderParameter, transFlagParameter);
        }
    
        public virtual int UpdateLVAttr(Nullable<int> id_attr, Nullable<int> id_node, Nullable<int> n_order, string char_val, Nullable<int> history_node, Nullable<int> transFlag)
        {
            var id_attrParameter = id_attr.HasValue ?
                new ObjectParameter("id_attr", id_attr) :
                new ObjectParameter("id_attr", typeof(int));
    
            var id_nodeParameter = id_node.HasValue ?
                new ObjectParameter("id_node", id_node) :
                new ObjectParameter("id_node", typeof(int));
    
            var n_orderParameter = n_order.HasValue ?
                new ObjectParameter("n_order", n_order) :
                new ObjectParameter("n_order", typeof(int));
    
            var char_valParameter = char_val != null ?
                new ObjectParameter("char_val", char_val) :
                new ObjectParameter("char_val", typeof(string));
    
            var history_nodeParameter = history_node.HasValue ?
                new ObjectParameter("history_node", history_node) :
                new ObjectParameter("history_node", typeof(int));
    
            var transFlagParameter = transFlag.HasValue ?
                new ObjectParameter("TransFlag", transFlag) :
                new ObjectParameter("TransFlag", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateLVAttr", id_attrParameter, id_nodeParameter, n_orderParameter, char_valParameter, history_nodeParameter, transFlagParameter);
        }
    
        public virtual int UpdateRefAttrs(Nullable<int> id_attr, Nullable<int> id_node1, Nullable<int> n_order, Nullable<int> id_node2, string char_val, Nullable<int> history_node, Nullable<int> transFlag)
        {
            var id_attrParameter = id_attr.HasValue ?
                new ObjectParameter("id_attr", id_attr) :
                new ObjectParameter("id_attr", typeof(int));
    
            var id_node1Parameter = id_node1.HasValue ?
                new ObjectParameter("id_node1", id_node1) :
                new ObjectParameter("id_node1", typeof(int));
    
            var n_orderParameter = n_order.HasValue ?
                new ObjectParameter("n_order", n_order) :
                new ObjectParameter("n_order", typeof(int));
    
            var id_node2Parameter = id_node2.HasValue ?
                new ObjectParameter("id_node2", id_node2) :
                new ObjectParameter("id_node2", typeof(int));
    
            var char_valParameter = char_val != null ?
                new ObjectParameter("char_val", char_val) :
                new ObjectParameter("char_val", typeof(string));
    
            var history_nodeParameter = history_node.HasValue ?
                new ObjectParameter("history_node", history_node) :
                new ObjectParameter("history_node", typeof(int));
    
            var transFlagParameter = transFlag.HasValue ?
                new ObjectParameter("TransFlag", transFlag) :
                new ObjectParameter("TransFlag", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateRefAttrs", id_attrParameter, id_node1Parameter, n_orderParameter, id_node2Parameter, char_valParameter, history_nodeParameter, transFlagParameter);
        }
    
        public virtual int UpdateRefAttrsUserAttrs(Nullable<int> id_attr, Nullable<int> id_node, Nullable<int> n_order, Nullable<int> id_user, Nullable<int> transFlag)
        {
            var id_attrParameter = id_attr.HasValue ?
                new ObjectParameter("id_attr", id_attr) :
                new ObjectParameter("id_attr", typeof(int));
    
            var id_nodeParameter = id_node.HasValue ?
                new ObjectParameter("id_node", id_node) :
                new ObjectParameter("id_node", typeof(int));
    
            var n_orderParameter = n_order.HasValue ?
                new ObjectParameter("n_order", n_order) :
                new ObjectParameter("n_order", typeof(int));
    
            var id_userParameter = id_user.HasValue ?
                new ObjectParameter("id_user", id_user) :
                new ObjectParameter("id_user", typeof(int));
    
            var transFlagParameter = transFlag.HasValue ?
                new ObjectParameter("TransFlag", transFlag) :
                new ObjectParameter("TransFlag", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateRefAttrsUserAttrs", id_attrParameter, id_nodeParameter, n_orderParameter, id_userParameter, transFlagParameter);
        }
    
        public virtual int UpdateSearchFolder(Nullable<int> id, string str_name, Nullable<int> transFlag)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var str_nameParameter = str_name != null ?
                new ObjectParameter("str_name", str_name) :
                new ObjectParameter("str_name", typeof(string));
    
            var transFlagParameter = transFlag.HasValue ?
                new ObjectParameter("TransFlag", transFlag) :
                new ObjectParameter("TransFlag", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateSearchFolder", idParameter, str_nameParameter, transFlagParameter);
        }
    
        public virtual int UpdateSearchOrder(Nullable<int> id, Nullable<int> n_order, Nullable<int> transFlag)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var n_orderParameter = n_order.HasValue ?
                new ObjectParameter("n_order", n_order) :
                new ObjectParameter("n_order", typeof(int));
    
            var transFlagParameter = transFlag.HasValue ?
                new ObjectParameter("TransFlag", transFlag) :
                new ObjectParameter("TransFlag", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateSearchOrder", idParameter, n_orderParameter, transFlagParameter);
        }
    
        public virtual int UpdateTableChar(Nullable<int> id_attr, Nullable<int> id_node, Nullable<int> n_order, Nullable<int> id_col, string char_val, Nullable<int> history_node, Nullable<int> transFlag)
        {
            var id_attrParameter = id_attr.HasValue ?
                new ObjectParameter("id_attr", id_attr) :
                new ObjectParameter("id_attr", typeof(int));
    
            var id_nodeParameter = id_node.HasValue ?
                new ObjectParameter("id_node", id_node) :
                new ObjectParameter("id_node", typeof(int));
    
            var n_orderParameter = n_order.HasValue ?
                new ObjectParameter("n_order", n_order) :
                new ObjectParameter("n_order", typeof(int));
    
            var id_colParameter = id_col.HasValue ?
                new ObjectParameter("id_col", id_col) :
                new ObjectParameter("id_col", typeof(int));
    
            var char_valParameter = char_val != null ?
                new ObjectParameter("char_val", char_val) :
                new ObjectParameter("char_val", typeof(string));
    
            var history_nodeParameter = history_node.HasValue ?
                new ObjectParameter("history_node", history_node) :
                new ObjectParameter("history_node", typeof(int));
    
            var transFlagParameter = transFlag.HasValue ?
                new ObjectParameter("TransFlag", transFlag) :
                new ObjectParameter("TransFlag", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateTableChar", id_attrParameter, id_nodeParameter, n_orderParameter, id_colParameter, char_valParameter, history_nodeParameter, transFlagParameter);
        }
    
        public virtual int UpdateTableDate(Nullable<int> id_attr, Nullable<int> id_node, Nullable<int> n_order, Nullable<int> id_col, Nullable<System.DateTime> date_val, Nullable<int> history_node, Nullable<int> transFlag)
        {
            var id_attrParameter = id_attr.HasValue ?
                new ObjectParameter("id_attr", id_attr) :
                new ObjectParameter("id_attr", typeof(int));
    
            var id_nodeParameter = id_node.HasValue ?
                new ObjectParameter("id_node", id_node) :
                new ObjectParameter("id_node", typeof(int));
    
            var n_orderParameter = n_order.HasValue ?
                new ObjectParameter("n_order", n_order) :
                new ObjectParameter("n_order", typeof(int));
    
            var id_colParameter = id_col.HasValue ?
                new ObjectParameter("id_col", id_col) :
                new ObjectParameter("id_col", typeof(int));
    
            var date_valParameter = date_val.HasValue ?
                new ObjectParameter("date_val", date_val) :
                new ObjectParameter("date_val", typeof(System.DateTime));
    
            var history_nodeParameter = history_node.HasValue ?
                new ObjectParameter("history_node", history_node) :
                new ObjectParameter("history_node", typeof(int));
    
            var transFlagParameter = transFlag.HasValue ?
                new ObjectParameter("TransFlag", transFlag) :
                new ObjectParameter("TransFlag", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateTableDate", id_attrParameter, id_nodeParameter, n_orderParameter, id_colParameter, date_valParameter, history_nodeParameter, transFlagParameter);
        }
    
        public virtual int UpdateTableFloat(Nullable<int> id_attr, Nullable<int> id_node, Nullable<int> n_order, Nullable<int> id_col, Nullable<double> float_val, Nullable<int> history_node, Nullable<int> transFlag)
        {
            var id_attrParameter = id_attr.HasValue ?
                new ObjectParameter("id_attr", id_attr) :
                new ObjectParameter("id_attr", typeof(int));
    
            var id_nodeParameter = id_node.HasValue ?
                new ObjectParameter("id_node", id_node) :
                new ObjectParameter("id_node", typeof(int));
    
            var n_orderParameter = n_order.HasValue ?
                new ObjectParameter("n_order", n_order) :
                new ObjectParameter("n_order", typeof(int));
    
            var id_colParameter = id_col.HasValue ?
                new ObjectParameter("id_col", id_col) :
                new ObjectParameter("id_col", typeof(int));
    
            var float_valParameter = float_val.HasValue ?
                new ObjectParameter("float_val", float_val) :
                new ObjectParameter("float_val", typeof(double));
    
            var history_nodeParameter = history_node.HasValue ?
                new ObjectParameter("history_node", history_node) :
                new ObjectParameter("history_node", typeof(int));
    
            var transFlagParameter = transFlag.HasValue ?
                new ObjectParameter("TransFlag", transFlag) :
                new ObjectParameter("TransFlag", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateTableFloat", id_attrParameter, id_nodeParameter, n_orderParameter, id_colParameter, float_valParameter, history_nodeParameter, transFlagParameter);
        }
    
        public virtual int UpdateTableInt(Nullable<int> id_attr, Nullable<int> id_node, Nullable<int> n_order, Nullable<int> id_col, Nullable<int> int_val, Nullable<int> history_node, Nullable<int> transFlag)
        {
            var id_attrParameter = id_attr.HasValue ?
                new ObjectParameter("id_attr", id_attr) :
                new ObjectParameter("id_attr", typeof(int));
    
            var id_nodeParameter = id_node.HasValue ?
                new ObjectParameter("id_node", id_node) :
                new ObjectParameter("id_node", typeof(int));
    
            var n_orderParameter = n_order.HasValue ?
                new ObjectParameter("n_order", n_order) :
                new ObjectParameter("n_order", typeof(int));
    
            var id_colParameter = id_col.HasValue ?
                new ObjectParameter("id_col", id_col) :
                new ObjectParameter("id_col", typeof(int));
    
            var int_valParameter = int_val.HasValue ?
                new ObjectParameter("int_val", int_val) :
                new ObjectParameter("int_val", typeof(int));
    
            var history_nodeParameter = history_node.HasValue ?
                new ObjectParameter("history_node", history_node) :
                new ObjectParameter("history_node", typeof(int));
    
            var transFlagParameter = transFlag.HasValue ?
                new ObjectParameter("TransFlag", transFlag) :
                new ObjectParameter("TransFlag", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateTableInt", id_attrParameter, id_nodeParameter, n_orderParameter, id_colParameter, int_valParameter, history_nodeParameter, transFlagParameter);
        }
    
        public virtual int UpdateTextAttr(Nullable<int> id_attr, Nullable<int> id_node, Nullable<int> history_node, string text_val, Nullable<int> transFlag)
        {
            var id_attrParameter = id_attr.HasValue ?
                new ObjectParameter("id_attr", id_attr) :
                new ObjectParameter("id_attr", typeof(int));
    
            var id_nodeParameter = id_node.HasValue ?
                new ObjectParameter("id_node", id_node) :
                new ObjectParameter("id_node", typeof(int));
    
            var history_nodeParameter = history_node.HasValue ?
                new ObjectParameter("history_node", history_node) :
                new ObjectParameter("history_node", typeof(int));
    
            var text_valParameter = text_val != null ?
                new ObjectParameter("text_val", text_val) :
                new ObjectParameter("text_val", typeof(string));
    
            var transFlagParameter = transFlag.HasValue ?
                new ObjectParameter("TransFlag", transFlag) :
                new ObjectParameter("TransFlag", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateTextAttr", id_attrParameter, id_nodeParameter, history_nodeParameter, text_valParameter, transFlagParameter);
        }
    
        public virtual int UpdateUser(Nullable<int> id_user, byte[] bin_password, string description, string full_name, Nullable<int> b_disabled)
        {
            var id_userParameter = id_user.HasValue ?
                new ObjectParameter("id_user", id_user) :
                new ObjectParameter("id_user", typeof(int));
    
            var bin_passwordParameter = bin_password != null ?
                new ObjectParameter("bin_password", bin_password) :
                new ObjectParameter("bin_password", typeof(byte[]));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var full_nameParameter = full_name != null ?
                new ObjectParameter("full_name", full_name) :
                new ObjectParameter("full_name", typeof(string));
    
            var b_disabledParameter = b_disabled.HasValue ?
                new ObjectParameter("b_disabled", b_disabled) :
                new ObjectParameter("b_disabled", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateUser", id_userParameter, bin_passwordParameter, descriptionParameter, full_nameParameter, b_disabledParameter);
        }
    
        public virtual int UpdateUserPassword(Nullable<int> id_user, byte[] bin_password)
        {
            var id_userParameter = id_user.HasValue ?
                new ObjectParameter("id_user", id_user) :
                new ObjectParameter("id_user", typeof(int));
    
            var bin_passwordParameter = bin_password != null ?
                new ObjectParameter("bin_password", bin_password) :
                new ObjectParameter("bin_password", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateUserPassword", id_userParameter, bin_passwordParameter);
        }
    
        public virtual int WriteSecurity_Log(Nullable<int> cat, Nullable<int> aip_user, string msg, Nullable<int> right_id, Nullable<int> permission_id, Nullable<int> node_id, Nullable<int> event_id, string host1)
        {
            var catParameter = cat.HasValue ?
                new ObjectParameter("cat", cat) :
                new ObjectParameter("cat", typeof(int));
    
            var aip_userParameter = aip_user.HasValue ?
                new ObjectParameter("aip_user", aip_user) :
                new ObjectParameter("aip_user", typeof(int));
    
            var msgParameter = msg != null ?
                new ObjectParameter("msg", msg) :
                new ObjectParameter("msg", typeof(string));
    
            var right_idParameter = right_id.HasValue ?
                new ObjectParameter("right_id", right_id) :
                new ObjectParameter("right_id", typeof(int));
    
            var permission_idParameter = permission_id.HasValue ?
                new ObjectParameter("permission_id", permission_id) :
                new ObjectParameter("permission_id", typeof(int));
    
            var node_idParameter = node_id.HasValue ?
                new ObjectParameter("node_id", node_id) :
                new ObjectParameter("node_id", typeof(int));
    
            var event_idParameter = event_id.HasValue ?
                new ObjectParameter("event_id", event_id) :
                new ObjectParameter("event_id", typeof(int));
    
            var host1Parameter = host1 != null ?
                new ObjectParameter("host1", host1) :
                new ObjectParameter("host1", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("WriteSecurity_Log", catParameter, aip_userParameter, msgParameter, right_idParameter, permission_idParameter, node_idParameter, event_idParameter, host1Parameter);
        }
    }
}
